
/*Lluka Stojollari*/

void yyerror(char *s)
{
   fputs(s,stderr); putc('\n',stderr);
}

void Init_Hash_Table(void)
{  int i;

   for(i=0; i<SYM_TABLE_SIZE; i++)
      ht.table[i]=NULL;
}

void Init_Cross_Link_Head(void)
{  int i;

   for(i=0; i<MAX_CROSS_LINKS; i++)
      Cross_Link_Head[i]=NULL;
}

AstNode *MkNode(int tipos,symbol *sn,AstNode *z0,AstNode *z1,AstNode *z2,AstNode *z3)
{  AstNode *p;

   p=(AstNode *)malloc(sizeof(AstNode));
   if(!p)
   {
      printf("Out of memory\n");
      exit(1);
   }
   else
   {
      p->NodeType=tipos;
      p->SymbolNode=sn;
      p->pAstNode[0]=z0;
      p->pAstNode[1]=z1;
      p->pAstNode[2]=z2;
      p->pAstNode[3]=z3;
      return(p);
   }
}

void push_vs(symbol *p)
{
   vs[++TopOfStack]=p;
}

symbol *pop_vs(void)
{
   return(vs[TopOfStack--]);
}

symbol *new_symbol(char *name)
{  symbol *symbp;

   if(!Symbol_free)
      symbp=(symbol *)malloc(sizeof(symbol));
   else
   {
      symbp=Symbol_free;
      Symbol_free=Symbol_free->Next_in_Cross_Link;
   }
   memset(symbp,0,sizeof(symbol));
   strncpy(symbp->name,name,(strlen(name)>NAME_MAX)?NAME_MAX:strlen(name));
   symbp->timi=0;
   symbp->disposable=FALSE;
   symbp->lvalue=TRUE;
   symbp->Next_in_Cross_Link=NULL;
   symbp->NextSymbol=NULL;
   symbp->PrevSymbol=NULL;
   return(symbp);
}


int set_class_types(symbol *symbp, int class_tipos)
{
   switch(class_tipos)
   {
      case 10:
         if(symbp->typos) return(1); 
         symbp->typos=class_tipos;
      break;
	  case 11:
         if(symbp->typos) return(1); 
         symbp->typos=class_tipos;
      break;
   }
   return(0);
}


void cpy_attributes(symbol *dst, symbol *src)
{  symbol *p;
   int ret_v;

   if(src)
   {
      for(p=dst; p; p=p->Next_in_Cross_Link)
      {
         if(src->typos)
         {
            ret_v=set_class_types(p,src->typos);
            if(ret_v)
            {
               printf("One type permitted\n");
               exit(1);
            }
         }
      }
   }
}

symbol *reverse_cross_links(symbol *symbp)
{  symbol *previous, *current, *next;
 
   if(!symbp) 
      return(NULL);
   previous=symbp;
   current=symbp->Next_in_Cross_Link;
   while(current)
   {
      next=current->Next_in_Cross_Link;
      current->Next_in_Cross_Link=previous;
      previous=current;
      current=next;
   }
   symbp->Next_in_Cross_Link=NULL;
   return(previous);
}

void Link_Symbol_to_Cross_Link(symbol *symbp)
{  symbol *p;

   if(!symbp)
      return;
   p=Cross_Link_Head[0];
   if(p)
   {
      for(; p->Next_in_Cross_Link; p=p->Next_in_Cross_Link);
      p->Next_in_Cross_Link=symbp;
   }
   else
      Cross_Link_Head[0]=symbp;
}

int mkkey(char *s)
{  char *p;
   int athr=0;

   for(p=s; *p; p++) athr=athr+(*p);
   return (athr % SYM_TABLE_SIZE);
}

void addsymb(symbol *symbp)
{  int i;
   symbol *p;

   i=mkkey(symbp->name);
   p=ht.table[i];
   symbp->NextSymbol=p;
   symbp->PrevSymbol=NULL;
   if(p) p->PrevSymbol=symbp;
   ht.table[i]=symbp;
   ht.numbsymbols++;
}

symbol *findsymb(char *onoma)
{  int i;
   symbol *p;

   i=mkkey(onoma);
   p=ht.table[i];
   while(p && (strcmp(p->name,onoma) !=0))
      p=p->NextSymbol;
   return(p);
}

void add_symbols_to_table(symbol *symbp)
{  symbol *exists, *neo;

   neo=symbp;
   while(neo)
   {
      exists=findsymb(neo->name);
      if( !exists )
      {
         addsymb(neo);
         neo=neo->Next_in_Cross_Link;
      }
           /* -- exists -- */
      else
      {
         printf("%s redeclaration.\n",neo->name);
         exit(1);
      }
   } /* -- end while -- */
}

void discard_symbol(symbol *symbp)
{
   if(symbp)
   {
      if(symbp->disposable)
      {
         symbp->Next_in_Cross_Link=Symbol_free;
         Symbol_free=symbp;
      }
   }
}

symbol *create_id(symbol *symbp)
{  symbol *p;
  
   p=new_symbol("");
   memcpy(p,symbp,sizeof(symbol));
   p->disposable=TRUE;
   p->lvalue=TRUE;
   p->Next_in_Cross_Link=NULL;
   p->NextSymbol=NULL;
   p->PrevSymbol=NULL;
   return(p);
}

void copy_value(symbol *dst, symbol *src)
{
   dst->timi=src->timi;
}

void copy_symbol(symbol *dst, symbol *src)
{  
   dst->typos=src->typos;
   copy_value(dst,src);
}

symbol *check_assignment(symbol *opnd1, symbol *opnd2)
{  symbol *p;

   if( !(opnd1->lvalue))
   {
      printf("The left operand must be an lvalue (modifiable)\n");
      exit(1);
   }
   p=new_symbol("");
   copy_symbol(p,opnd1);
   p->disposable=TRUE;
   p->lvalue=FALSE;
   discard_symbol(opnd1);
   discard_symbol(opnd2);
   return(p);
}
void check_types(symbol *symbp1, symbol * symbp2){
		
	if(symbp1->typos!=symbp2->typos){
	    printf("type equality error %s = %s",symbp1->name,symbp2->name);
		exit(1);
	}
}
void push_node(AstNode *p)
{
   stack[++Top_stack]=p;
}

AstNode *pop_node(void)
{
   return(stack[Top_stack--]);
}


void push_node_code(AstNode *p)
{
   stack[++Top_code_stack]=p;
}

AstNode *pop_node_code(void)
{
   return(stack[Top_code_stack--]);
}

void disable(AstNode* p){
	int i;
	if(p)
    {
	   p->available=0;
       for(i=0; i<4; i++) {
		  disable(p->pAstNode[i]);
		   
	  }
	   
   }
}

void new_line_code(){
	
    fprintf(mips_text, "li   $v0 , 4\nla $a0 , newline\nsyscall\n");
	fprintf(mips_text, "\n");

}

int isNumeric (char * s)
{
    if (s == NULL || *s == '\0' || isspace(*s))
      return 0;
    char * p;
    strtod (s, &p);
    return *p == '\0';
}

int isFloat   (char *s)
{
	int flag=0;
	int i=0;
    int length = strlen(s);
    while(s[i++] != '\0')    
    {
        if(s[i] == '.')    
        {
            flag=1;
            break;
        }
		
    }
	return flag;
	
}
void astFactor_generation(AstNode* nd,AstNode* nd1,int i){
	
	switch(i)
			 {
				case 1: //1  -(int)_generation
				
						if(isNumeric(nd1->SymbolNode->regist)==1){
						
							  int t1;
							  for (int i=0;i<10;i++){
									if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
										 t1=i;
										 break;
									}
							 
							  }
							  fprintf(mips_text, "li  $t%d , %s \n",t1 , nd1->SymbolNode->regist); 
							  fprintf(mips_text, "mul  $t%d , $t%d , -1 \n", t1, t1); 
							  char str[] = "$t";
							  char c = t1+'0';
							  size_t len = strlen(str);
							  char str2[len + 1 + 1] ; 
							  strcpy(str2, str);
							  str2[len] = c;
							  str2[len + 1] = '\0';
							  fact=t1;
						  
							  strcpy(nd->SymbolNode->regist,str2);
							  return ;
						     
						  
							
						
						}else{
						
							fprintf(mips_text, "mul  %s , %s , -1 \n",nd1->SymbolNode->regist , nd1->SymbolNode->regist); 
							strcpy(nd->SymbolNode->regist,nd1->SymbolNode->regist);
							return ;
						
						}
						
				break;
				
				case 2: //2  -(float)_generation
				
						if(isFloat(nd1->SymbolNode->regist)==1){
						
							float tmp=atof(nd1->SymbolNode->regist); 
							int encoding = *((int *)&tmp);		
							
							int t1;
							for (int i=0;i<10;i++){
								if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									t1=i;
									break;
								}
						    }	
							
							fprintf(mips_text,"\nli      $t%d , %d\n",t1,encoding);  // li $t1  107778799
							
							int f1;
							for (int j=0;j<32;j++){
								if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
									f1=j;
									break;
								}
						    }	
							fprintf(mips_text, "mtc1     $t%d , $f%d\n",t1,f1);    // mtc1 $t1 , f1
							
							f[f1]=1;
							
							int f2;
							for (int y=0;y<32;y++){
								if(f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
									f2=y;
									break;
								}
						    }	
							
							fprintf(mips_text,"\nli      $t%d , -1\n",t1);
							fprintf(mips_text, "mtc1     $t%d , $f%d\n",t1,f2);
							fprintf(mips_text,"cvt.s.w   $f%d  , $f%d  \n",f2,f2);
							
							f[f2]=1;
						
							int f3;
							for (int g=0;g<32;g++){
								if(f[g]==0 && g!=addf && g!=subf && g!=multf && g!=divf && g!=facf){
									f3=g;
									break;
								}
						    }
							
							fprintf(mips_text, "mul.s  $f%d , $f%d , $f%d \n",f3, f1, f2); 
							f[f1]=0;
							f[f2]=0;
							char str[] = "$f";
							if(f3>=10){
							   
								char str3[3];
								itoa(f3,str3,10);
								strcat(str, str3);
								strcpy(nd->SymbolNode->regist,str);
								facf=f3;
								return;
							 } 
							  else{
								char c = f3+'0';
								size_t len = strlen(str);
								char str2[len + 1 + 1] ; 
								strcpy(str2, str);
								str2[len] = c;
								str2[len + 1] = '\0';
								facf=f3;
								strcpy(nd->SymbolNode->regist,str2);
								return;
							  }
							
						
						}else{
						
							int t1;
							for (int i=0;i<10;i++){
								if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									t1=i;
									break;
								}
						    }	
							int f1;
							for (int y=0;y<32;y++){
								if(f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
									f1=y;
									break;
								}
						    }
							fprintf(mips_text,"\nli      $t%d , -1	\n",t1);
							fprintf(mips_text, "mtc1     $t%d , $f%d \n",t1,f1);
							fprintf(mips_text,"cvt.s.w   $f%d  , $f%d  \n",f1,f1);
							fprintf(mips_text, "mul.s  %s , %s , $f%d \n",nd1->SymbolNode->regist , nd1->SymbolNode->regist,f1); 
							strcpy(nd->SymbolNode->regist,nd1->SymbolNode->regist);
							return;
						
						}
					
					
				break;
			 
			 
			 }

}

void data_generation(char * name,int i){
	
	switch(i)
			 {
				case 1: //1  data_int_generation
					fprintf(mips_data, "%s: .word  0\n", name); 
				break;
				
				case 2: //2  data_float_generation
					fprintf(mips_data, "%s: .float 0.0\n", name); 
				break;
			 
			 
			 }
}

void declare_generation(AstNode * node,int i){
	
	switch(i)
			 {
				case 1: //1  declare_int_generation
					
					for(int i=0;i<8;i++){
					  if(s[i]==0){
						 
						  
						  fprintf(mips_text, "lw   $s%d , %s \n",i,node->SymbolNode->name); 
					
						  char str[] = "$s";
						  char c = i+'0';
						  size_t len = strlen(str);
						  char str2[len + 1 + 1] ; 
						  strcpy(str2, str);
						  str2[len] = c;
						  str2[len + 1] = '\0';
						  
						  strcpy(node->SymbolNode->regist,str2);
						  
						  s[i]=1;
						  return;
					  }
					}
					
					
				break;
				
				case 2: //2  declare_float_generation
					
					for(int i=0;i<32;i++){
					  if(f[i]==0){
						 
						  fprintf(mips_text, "l.s  $f%d , %s \n",i,node->SymbolNode->name); 
					
						  char str[] = "$f";
						  if(i>=10){
						   
							char str3[3];
							itoa(i,str3,10);
							strcat(str, str3);
							strcpy(node->SymbolNode->regist,str);
						 
						 } 
						  else{
							char c;
							c = i+'0';
							size_t len = strlen(str);
							char str2[len + 1 + 1] ; 
							strcpy(str2, str);
							str2[len] = c;
							str2[len + 1] = '\0';
							strcpy(node->SymbolNode->regist,str2);
						  }
						  
						 f[i]=1;
						 return;
					  }
					}
					
				break;
			 
			 
			 }
}


void print_generation(AstNode * node,int i){
	
	switch(i)
			 {
				case 1: //1  print_int_generation
				
					if(isNumeric(node->SymbolNode->regist)==1){
						int t1;
						for(int i=0;i<10;i++){
							if(t[i]==0){
								t1=i;
								break;
							}
						}
						fprintf(mips_text, "\nli   $t%d , %d \n",t1,node->SymbolNode->timi);  
						fprintf(mips_text, "\nli   $v0 , 1 \n");  
						fprintf(mips_text, "move $a0 , $t%d \n",t1);  
						fprintf(mips_text, "syscall \n\n");
						new_line_code()	;
					}
					else{
						fprintf(mips_text, "\nli   $v0 , 1 \n");  
						fprintf(mips_text, "move $a0 , %s \n",node->SymbolNode->regist);  
						fprintf(mips_text, "syscall \n\n");
						new_line_code()	;
					}
				break;
				
				case 2: //2  print_float_generation
					if(isFloat(node->SymbolNode->regist)==1){
						
						float tmp=atof(node->SymbolNode->regist); 
						int encoding = *((int *)&tmp);			 
							
						int t1,f1;
						for (int i=0;i<10;i++){
							if(t[i]==0){
								 t1=i;
								 break;
							}
						 
						}	
						
						fprintf(mips_text,"\nli      $t%d , %d\n",t1,encoding);  		
						
						for(int z=0;z<32;z++){
							if(f[z]==0){
								f1=z;				
								break;
							}
						}
						
						fprintf(mips_text, "mtc1     $t%d , $f%d\n",t1,f1); 
						fprintf(mips_text, "\nli   $v0 , 2 \n");  
						fprintf(mips_text, "mov.s $f12 ,$f%d \n",f1);  
						fprintf(mips_text, "syscall \n\n");
						new_line_code();
					
					}
					else{	
						fprintf(mips_text, "\nli   $v0 , 2 \n");  
						fprintf(mips_text, "mov.s $f12 , %s \n",node->SymbolNode->regist);  
						fprintf(mips_text, "syscall \n\n");
						new_line_code()	;
					}
				break;
			 }
			 
}


void intialize_generation(AstNode * nd1,AstNode * nd2,int i){
	switch(i)
			 {
				case 1: //1  intialize_int_generation (both integers)
				
					if(isNumeric(nd2->SymbolNode->regist)==1)
					{
						fprintf(mips_text, "li   %s , %s \n\n",nd1->SymbolNode->regist,nd2->SymbolNode->regist);  
					}
					else
					{
						fprintf(mips_text, "move %s , %s \n\n",nd1->SymbolNode->regist,nd2->SymbolNode->regist); 
						
					}
					
				break;
				
				case 2: //2  intialize_int_float_generation (on the left integer and on the right float )
					
					if(isFloat(nd2->SymbolNode->regist)==1){
						
						
						float tmp=atof(nd2->SymbolNode->regist); // 2.7
						int encoding = *((int *)&tmp);			 // 1076677837
							
						int t1,f1,f2;
						for (int i=0;i<10;i++){
							if(t[i]==0){
								 t1=i;
								 break;
							}
						 
						}
															
						fprintf(mips_text,"\nli      $t%d , %d\n",t1,encoding);  // li $t1 , 1076677837
						
									
						for(int z=0;z<32;z++){
							if(f[z]==0){
								f1=z;				// here we see which f register is free and choose it  
								break;
							}
						}
						
						fprintf(mips_text, "mtc1     $t%d , $f%d\n",t1,f1);  
						fprintf(mips_text, "cvt.w.s  $f%d , $f%d\n",f1,f1);
						fprintf(mips_text, "mfc1     $t%d , $f%d \n",t1,f1);
						fprintf(mips_text, "move     %s   , $t%d \n\n",nd1->SymbolNode->regist,t1);
						
						
						
					}else{
					
					
						 int t1,f1;
						 for (int j=0;j<32;j++){
							if(f[j]==0){
								 f1=j;
								 break;
							}
						 
						}
						fprintf(mips_text, "\ncvt.w.s   $f%d , %s\n",f1,nd2->SymbolNode->regist);
						
						for (int i=0;i<10;i++){
							if(t[i]==0){
								 t1=i;
								 break;
							}
						 
						}
						fprintf(mips_text, "mfc1  		$t%d , $f%d \n",t1,f1);
						fprintf(mips_text, "move  		%s   , $t%d \n\n",nd1->SymbolNode->regist,t1);
						
						
					}
					
				
				break;
				
				case 3: //3  intialize_float_int_generation (on the left is float and on the right integer float=integer )
					
					if(isNumeric(nd2->SymbolNode->regist)==1)
					{
						
						int t1,f1;
						for(int i=0;i<10;i++){
							if(t[i]==0){
								t1=i;
								break;
							}
						
						}
						for(int j=0;j<32;j++){
							if(f[j]==0){
								f1=j;
								break;
							}
						
						}
						
						fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd2->SymbolNode->timi);
						fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
						fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
						fprintf(mips_text,"mov.s   %s    , $f%d  \n\n",nd1->SymbolNode->regist,f1);
						
						
					}
					else
					{
					
						int f1;
						for(int j=0;j<32;j++){
							if(f[j]==0){
								f1=j;
								break;
							}
						
						}
						
						fprintf(mips_text,"\nmtc1   %s   , $f%d \n",nd2->SymbolNode->regist,f1);
						fprintf(mips_text,"cvt.s.w  $f%d , $f%d  \n",f1,f1);
						fprintf(mips_text,"mov.s    %s   , $f%d  \n\n",nd1->SymbolNode->regist,f1);
						
						
					}
					
					
				
				
				break;
				
				case 4: //4  intialize_float_generation	(both floats)
					
					if(isFloat(nd2->SymbolNode->regist)==1){
	
						float tmp=atof(nd2->SymbolNode->regist); // convert the string to float 
						int encoding = *((int *)&tmp);			// the encoding of float 
						int t1,i;
						for(i=0;i<10;i++){
							 if(t[i]==0){
								t1=i;				//// here we see which t register is free and choose it
								break;
							 }
						}
						
						fprintf(mips_text, "\nli   $t%d , %d \n\n",t1,encoding);   // here we use temporarily the register  $t(t1)
						fprintf(mips_text, "mtc1   $t%d , %s \n\n",t1,nd1->SymbolNode->regist);       
						
						
						
						
					}else{
					
						fprintf(mips_text, "mov.s  %s   , %s \n\n",nd1->SymbolNode->regist,nd2->SymbolNode->regist); 
						
					}
				
				break;
			 }
			 

}

void add_generation (AstNode* nd, AstNode* nd1, AstNode* nd2, int i){
	
	switch(i)
				{				
					case 1: //1  add two integers
					
					
						// both of sides are numbers and not registers (integers)
							 
							 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd2->SymbolNode->regist)==1){
								
								int t1,t2;
								for(int i=0;i<10;i++){
									if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									t1=i;					
									break;
									}
								}
								fprintf(mips_text, "\nli   $t%d , %d \n",t1,nd1->SymbolNode->timi);
								fprintf(mips_text, "addi  $t%d , $t%d , %d \n",t1,t1,nd2->SymbolNode->timi);
								
							  char str[] = "$t";
							  char c = t1+'0';
							  size_t len = strlen(str);
							  char str2[len + 1 + 1] ; 
							  strcpy(str2, str);
							  str2[len] = c;
							  str2[len + 1] = '\0';
							  addt=t1;
							  
							  strcpy(nd->SymbolNode->regist,str2);
							  return;
							  
							  
							  }
							  
							// the left side of assignment is number and the right is register  ex. 2+i(int)
						else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd2->SymbolNode->regist)==0){
						
							    int t1;
								for(int i=0;i<10;i++){
									if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									t1=i;					
									break;
									}
								}
							  fprintf(mips_text, "addi $t%d , %s , %d \n",t1,nd2->SymbolNode->regist,nd1->SymbolNode->timi);
							  char str[] = "$t";
							  char c = t1+'0';
							  size_t len = strlen(str);
							  char str2[len + 1 + 1] ; 
							  strcpy(str2, str);
							  str2[len] = c;
							  str2[len + 1] = '\0';
							  addt=t1;
							  
							  strcpy(nd->SymbolNode->regist,str2);
							  return;
							  
							  }
						
						// the left side of assignment is register and the right is number  ex. i(int)+2
						else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd2->SymbolNode->regist)==1){
								 
							
							    int t1;
								for(int i=0;i<10;i++){
									if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt  && i!=fact){
									t1=i;					
									break;
									}
								}
							  fprintf(mips_text, "addi $t%d , %s , %d \n",t1,nd1->SymbolNode->regist,nd2->SymbolNode->timi);
							  char str[] = "$t";
							  char c = t1+'0';
							  size_t len = strlen(str);
							  char str2[len + 1 + 1] ; 
							  strcpy(str2, str);
							  str2[len] = c;
							  str2[len + 1] = '\0';
							  addt=t1;
							  strcpy(nd->SymbolNode->regist,str2);
							  return;
							  
							  }
							  
						// both of side are registers ex. i(int)*j(int)
						else{	  
							    
							  int t1;
								for(int i=0;i<10;i++){
									if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									t1=i;					
									break;
									}
								}
							  fprintf(mips_text, "add  $t%d , %s , %s \n",t1,nd1->SymbolNode->regist,nd2->SymbolNode->regist); 
							 
							 
							  char str[] = "$t";
							  char c = t1+'0';
							  size_t len = strlen(str);
							  char str2[len + 1 + 1] ; 
							  strcpy(str2, str);
							  str2[len] = c;
							  str2[len + 1] = '\0';
							  strcpy(nd->SymbolNode->regist,str2);
							  addt=t1;
							  return;
							  
							} 
							
						
					break;
					
					case 2: //2  add integer+float
						
							   //both are numbers   psh 2+2.2
							   if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd2->SymbolNode->regist)==1){
									
									int t1,f1,f2,f3;
									for(int i=0;i<10;i++){
											if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;					
											break;
											}
									}
									fprintf(mips_text, "li      $t%d , %d \n",t1,nd1->SymbolNode->timi);
									
									for(int j=0;j<32;j++){
											if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
											}
									}
									fprintf(mips_text, "mtc1    $t%d , $f%d\n",t1,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d\n",f1,f1);
									f[f1]=1;
									
									for(int z=0;z<32;z++){
											if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
												f2=z;				
												break;
											}
									}
									
									float tmp=atof(nd2->SymbolNode->regist);     	// convert string to float 
									int encoding = *((int *)&tmp);	
									
									fprintf(mips_text, "\nli   $t%d , %d \n",t1,encoding);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f2);
									
									f[f2]=1;
									for(int y=0;y<32;y++){
											if(f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
											f3=y;				
											break;
											}
									}
									fprintf(mips_text, "add.s $f%d , $f%d , $f%d \n",f3,f1,f2);
									f[f1]=0;
									f[f2]=0;
									
									
									char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										addf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										addf=f3;
										return;
									  }
									
							   }
							   //on the left side is the number and on the right register ex. 2+bub(float)
							   else  if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd2->SymbolNode->regist)==0){
								
									int t1,f1,f2,f3;
									for(int i=0;i<10;i++){
											if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;				
											break;
											}
									}
									fprintf(mips_text, "\nli      $t%d , %d \n",t1,nd1->SymbolNode->timi);
									
									for(int j=0;j<32;j++){
											if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				 
											break;
											}
									}
									fprintf(mips_text, "mtc1    $t%d , $f%d\n",t1,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d\n",f1,f1);
									f[f1]=1;
						
									for(int z=0;z<32;z++){
											if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
												f2=z;				
												break;
											}
									}
									fprintf(mips_text, "add.s $f%d , $f%d , %s\n",f2,f1,nd2->SymbolNode->regist);
									f[f1]=0;
									
									char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										addf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										addf=f2;
										return;
									  }
								
							   }
							   //on the left side is register(integer) and on the right float i(int)+2.2
							   else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd2->SymbolNode->regist)==1){
				
								    float tmp=atof(nd2->SymbolNode->regist);    
									int encoding = *((int *)&tmp);				
									int t1,f1,f2,f3;
								
									for(int i=0;i<10;i++){
										
										 if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;				
											break;
										 }
									}
									for(int j=0;j<32;j++){
										 if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
										 }
									}
									f[f1]=1;
									
									fprintf(mips_text, "\nli   $t%d , %d \n",t1,encoding);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f1);
									
									for(int z=0;z<32;z++){
										 if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
										 }
									}
									
									f[f2]=1;
	
									fprintf(mips_text, "mtc1 %s, $f%d\n",nd1->SymbolNode->regist,f2);
									fprintf(mips_text, "cvt.s.w $f%d, $f%d\n",f2,f2);
									
									f[f2]=1;
									for(int y=0;y<32;y++){
										 if(f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
											f3=y;				
											break;
										 }
									}
									
									
									fprintf(mips_text, "add.s $f%d , $f%d , $f%d \n",f3,f2,f1);
									f[f1]=0;
									f[f2]=0;
									
									
									char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										addf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										addf=f3;
										return;
									  }
											
									
							  }
							  //both are registers  psh i(int)+bub(float)
							  else{
								 
									int f1,f2;
									for(int i=0;i<32;i++){
										 if(f[i]==0 && i!=addf && i!=subf && i!=multf && i!=divf && i!=fact){
											f1=i;				
											break;
										 }
									}
									
									fprintf(mips_text, "mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d \n",f1,f1);
									
									f[f1]=1;
									for(int j=0;j<32;j++){
										 if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f2=j;				
											break;
										 }
									}
									
									fprintf(mips_text, "add.s $f%d , $f%d , %s\n",f2,f1,nd2->SymbolNode->regist);
									f[f1]=0;
									
									char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										addf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										addf=f2;
										return;
									  }
							  }
						
							  
						  
					
					break;
					
					case 3: //3  add float+integer
					
					//both are numbers  2.2+2
							   if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd2->SymbolNode->regist)==1){
									
									int t1,f1,f2,f3;
									
									for(int i=0;i<10;i++){
											if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
												t1=i;					
												break;
											}
									}
									
									for(int j=0;j<32;j++){
											if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
												f1=j;				
												break;
											}
									}
									
									float tmp=atof(nd1->SymbolNode->regist);     	
									int encoding = *((int *)&tmp);	
									
									fprintf(mips_text, "\nli   $t%d , %d \n",t1,encoding);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f1);
									f[f1]=1;
									
									
									fprintf(mips_text, "\nli   $t%d , %d \n",t1,nd2->SymbolNode->timi);
									
									for(int z=0;z<32;z++){ 
											if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
											}
									}
									fprintf(mips_text, "mtc1    $t%d , $f%d\n",t1,f2);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d\n",f2,f2);
									f[f2]=1;
									
									for(int y=0;y<32;y++){
											if(f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
											f3=y;				
											break;
											}
									}
									fprintf(mips_text, "add.s $f%d , $f%d , $f%d \n",f3,f1,f2);
									f[f1]=0;
									f[f2]=0;
									
									char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										addf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										addf=f3;
										return;
									  }
									
									
									
							   }
							   //on the left side is number(float ) and on the right side register(int ) 2.2+i(int)
							   else  if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd2->SymbolNode->regist)==0){
								
									int t1,f1,f2,f3;
									
									for(int i=0;i<10;i++){
										 if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
												t1=i;					
												break;
											}
									}
									
									for(int j=0;j<32;j++){
											if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
												f1=j;				
												break;
											}
									}
									
									float tmp=atof(nd1->SymbolNode->regist);     	
									int encoding = *((int *)&tmp);	
									
									fprintf(mips_text, "\nli   $t%d , %d \n",t1,encoding);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f1);
									f[f1]=1;
									
						
									for(int z=0;z<32;z++){
											if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
												f2=z;				
												break;  
											}
									}
									
									fprintf(mips_text, "mtc1  %s , $f%d \n",nd2->SymbolNode->regist,f2);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d \n",f2,f2);
									f[f2]=1;
									
									for(int y=0;y<32;y++){
											if(f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
											f3=y;				
											break;
											}
									}
									fprintf(mips_text, "add.s $f%d , $f%d , $f%d \n",f3,f1,f2);
									f[f1]=0;
									f[f2]=0;
									
									char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										addf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										addf=f3;
										return;
									  }
								
							   }
							   //on the left  side is register and on the right number  bub(float)+2
							   else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd2->SymbolNode->regist)==1){
				
								   
									int t1,f1,f2;
									for(int i=0;i<10;i++){
										 if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;				
											break;
										 }
									}
									for(int j=0;j<32;j++){
										 if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
										 }
									}
									
									
									fprintf(mips_text, "\nli   $t%d , %d \n",t1,nd2->SymbolNode->timi);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d\n",f1,f1);
									
									f[f1]=1;
									
									for(int z=0;z<32;z++){
										 if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
										 }
									}
									
									
									fprintf(mips_text, "add.s $f%d , %s , $f%d \n",f2,nd1->SymbolNode->regist,f1);
									f[f1]=0;
									
									
									char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										addf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										addf=f2;
										return;
									  }
											
									
							  }
							  //both are registers  bub(float)+i(int)
							  else{
								 
									int f1,f2;
									for(int i=0;i<32;i++){
										 if(f[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											f1=i;				
											break;
										 }
									}
									
									fprintf(mips_text, "mtc1    %s , $f%d \n",nd2->SymbolNode->regist,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d \n",f1,f1);
									
									f[f1]=1;
									for(int j=0;j<32;j++){
										 if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf) {
											f2=j;				
											break;
										 }
									}
									
									fprintf(mips_text, "add.s $f%d , %s , $f%d \n",f2,nd1->SymbolNode->regist,f1);
									f[f1]=0;
									
									char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										addf=f2;
										return;
										
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										addf=f2;
										return;
									  }
							  }
						
					
					
					
					
					
					break;
					
					case 4: //4  add two floats
							
						// both are numbers  2.2+3.4
						if(isFloat(nd1->SymbolNode->regist)==1  && isFloat(nd2->SymbolNode->regist)==1){	 
							  
								 int t1,f1,f2,f3;
								 for(int i=0;i<10;i++){
								   if (t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									  t1=i;
									  break;
								   }
								}
								 for(int j=0;j<32;j++){
								   if (f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
									  f1=j;
									  break;
								   }
								}
								 float tmp=atof(nd1->SymbolNode->regist);				
								 int encoding = *((int *)&tmp);
								 
								 fprintf(mips_text, "\nli   $t%d , %d \n",t1,encoding);
								 fprintf(mips_text, "mtc1 $t%d , $f%d \n",t1,f1);
								 f[f1]=1;
							
								 for(int y=0;y<32;y++){
								   if (f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
									  f2=y;
									  break;
								   }
								 }
								 
								 float tmp2=atof(nd2->SymbolNode->regist);				
								 int encoding2 = *((int *)&tmp2);
								 
								 fprintf(mips_text, "\nli   $t%d , %d \n",t1,encoding2);
								 fprintf(mips_text, "mtc1 $t%d , $f%d \n",t1,f2);
								 f[f2]=1;
								 
								 for(int k=0;k<32;k++){
								   if (f[k]==0 && k!=addf && k!=subf && k!=multf && k!=divf && k!=facf){
									  f3=k;
									  break;
								   }
								 }
								 fprintf(mips_text, "add.s $f%d, $f%d ,$f%d  \n",f3,f1,f2);
								 
								  f[f1]=0; 
								  f[f2]=0;
								  
								 char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										addf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										addf=f3;
										return;
									  }
								 
								
							 
						}
						
						// on the left side is register and on the right number ex. bub(float)+3.4
						else if(isFloat(nd1->SymbolNode->regist)==0  && isFloat(nd2->SymbolNode->regist)==1){
							
								int t1,f1,f2;
								 for(int i=0;i<10;i++){
								   if (t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									  t1=i;
									  break;
								   }
								}
								 for(int j=0;j<32;j++){
								   if (f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
									  f1=j;
									  break;
								   }
								}
								 float tmp=atof(nd2->SymbolNode->regist);				
								 int encoding = *((int *)&tmp);
								 
								 fprintf(mips_text, "\nli   $t%d , %d \n",t1,encoding);
								 fprintf(mips_text, "mtc1 $t%d , $f%d \n",t1,f1);
								 f[f1]=1;
							
								 for(int y=0;y<32;y++){
								   if (f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
									  f2=y;
									  break;
								   }
								 }
								 
								 fprintf(mips_text, "add.s $f%d, %s ,$f%d  \n",f2,nd1->SymbolNode->regist,f1);
								  f[f1]=0; 
								  
								  char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										addf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										addf=f2;
										return;
									  }
						
						
						}
						
						// on the left side is numebr and on the right register  ex. 3.4+bub(float)
						else if(isFloat(nd1->SymbolNode->regist)==1  && isFloat(nd2->SymbolNode->regist)==0){
						
								int t1,f1,f2;
								 for(int i=0;i<10;i++){
								   if (t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									  t1=i;
									  break;
								   }
								}
								 for(int j=0;j<32;j++){
								   if (f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
									  f1=j;
									  break;
								   }
								}
								 float tmp=atof(nd1->SymbolNode->regist);				
								 int encoding = *((int *)&tmp);
								 
								 fprintf(mips_text, "\nli   $t%d , %d \n",t1,encoding);
								 fprintf(mips_text, "mtc1 $t%d , $f%d \n",t1,f1);
								 f[f1]=1;
							
								 for(int y=0;y<32;y++){
								   if (f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
									  f2=y;
									  break;
								   }
								 }
								 
								 fprintf(mips_text, "add.s $f%d, $f%d , %s  \n",f2,f1,nd2->SymbolNode->regist);
								  f[f1]=0; 
								  
								 char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										addf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										addf=f2;
										return;
									  }
						
						
						
						
						}	  
						//both are registers 
						else{
						
								int f1;
								 for(int i=0;i<32;i++){
								   if (f[i]==0 && i!=addf && i!=subf && i!=multf && i!=divf && i!=facf){
									  f1=i;
									  break;
								   }
								 }
								  fprintf(mips_text, "add.s  $f%d , %s , %s \n",f1,nd1->SymbolNode->regist,nd2->SymbolNode->regist); 
								  
								  
								  char str[] = "$f";
									if(f1>=10){
										
										char str3[3];
										itoa(f1,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										addf=f1;
										return;
									 
									 } 
									 else{
										char c = f1+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										addf=f1;
										return;
									  }
							  }
						  
					
					break;
				}
				
				
}

void mult_generation(AstNode* nd, AstNode* nd1, AstNode* nd2, int i){
		
		switch(i)
				{				
					case 1: //1  multiply  two integers
					
					
						// both are numbers  2*2
							 
							 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd2->SymbolNode->regist)==1){
								
								
								int t1,t2;
								for(int i=0;i<10;i++){
									if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									t1=i;					
									break;
									}
								}
								fprintf(mips_text, "\nli   $t%d , %d \n",t1,nd1->SymbolNode->timi);
								fprintf(mips_text, "mul  $t%d , $t%d , %d \n",t1,t1,nd2->SymbolNode->timi);
								
							  char str[] = "$t";
							  char c = t1+'0';
							  size_t len = strlen(str);
							  char str2[len + 1 + 1] ; 
							  strcpy(str2, str);
							  str2[len] = c;
							  str2[len + 1] = '\0';
							  multt=t1;
							  strcpy(nd->SymbolNode->regist,str2);
							  return;
							  
							  
							  }
							  
							// on the left side is number and on the right register  ex. 2*i(int)
						else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd2->SymbolNode->regist)==0){
						
							    int t1;
								for(int i=0;i<10;i++){
									if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									t1=i;					
									break;
									}
								}
							  fprintf(mips_text, "mul $t%d , %s , %d \n",t1,nd2->SymbolNode->regist,nd1->SymbolNode->timi);
							  char str[] = "$t";
							  char c = t1+'0';
							  size_t len = strlen(str);
							  char str2[len + 1 + 1] ; 
							  strcpy(str2, str);
							  str2[len] = c;
							  str2[len + 1] = '\0';
							  multt=t1;
							  strcpy(nd->SymbolNode->regist,str2);
							  return;
							  
							  }
						
						// on the left side is register  and on the right number   ex. i(int)*2
						else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd2->SymbolNode->regist)==1){
								  
								  
							    int t1;
								for(int i=0;i<10;i++){
									if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
										t1=i;					//ketu shikoj kush register t eshte i lire dhe e mbaj ne t1
										break;
									}
								}
							  fprintf(mips_text, "mul $t%d , %s , %d \n",t1,nd1->SymbolNode->regist,nd2->SymbolNode->timi);
							  char str[] = "$t";
							  char c = t1+'0';
							  size_t len = strlen(str);
							  char str2[len + 1 + 1] ; 
							  strcpy(str2, str);
							  str2[len] = c;
							  str2[len + 1] = '\0';
							  multt=t1;
							  strcpy(nd->SymbolNode->regist,str2);
							  return;
							  
							  }
							  
						// both are registers  i(int)*j(int)
						else{	  
							    
							  int t1;
								for(int i=0;i<10;i++){
									if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									t1=i;				
									break;
									}
								}
							  fprintf(mips_text, "mul  $t%d , %s , %s \n",t1,nd1->SymbolNode->regist,nd2->SymbolNode->regist); 
							 
							
							  char str[] = "$t";
							  char c = t1+'0';
							  size_t len = strlen(str);
							  char str2[len + 1 + 1] ; 
							  strcpy(str2, str);
							  str2[len] = c;
							  str2[len + 1] = '\0';
							  multt=t1;
							  strcpy(nd->SymbolNode->regist,str2);
							  return;
							  
							} 
						
					break;
					
					case 2: //2  multiply integer*float
						
							   //both are numbers   psh 2*2.2
							   if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd2->SymbolNode->regist)==1){
									
									int t1,f1,f2,f3;
									for(int i=0;i<10;i++){
											if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;					
											break;
											}
									}
									fprintf(mips_text, "\nli      $t%d , %d \n",t1,nd1->SymbolNode->timi);
									
									for(int j=0;j<32;j++){
											if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
											}
									}
									fprintf(mips_text, "mtc1    $t%d , $f%d\n",t1,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d\n",f1,f1);
									f[f1]=1;
									
									for(int z=0;z<32;z++){
											if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
											}
									}
									
									float tmp=atof(nd2->SymbolNode->regist);     	
									int encoding = *((int *)&tmp);	
									
									fprintf(mips_text, "\nli   $t%d , %d \n",t1,encoding);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f2);
									
									f[f2]=1;
									for(int y=0;y<32;y++){
											if(f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
											f3=y;				
											break;
											}
									}
									fprintf(mips_text, "mul.s $f%d , $f%d , $f%d \n",f3,f1,f2);
									f[f1]=0;
									f[f2]=0;
									
									char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										multf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										multf=f3;
										return;
									  }
									
									
									
							   }
							   //on the left side is number and on the right register  ex. 2*bub(float)
							   else  if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd2->SymbolNode->regist)==0){
								
									int t1,f1,f2,f3;
									for(int i=0;i<10;i++){
											if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;				
											break;
											}
									}
									fprintf(mips_text, "\nli      $t%d , %d \n",t1,nd1->SymbolNode->timi);
									
									for(int j=0;j<32;j++){
											if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
											}
									}
									fprintf(mips_text, "mtc1    $t%d , $f%d\n",t1,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d\n",f1,f1);
									f[f1]=1;
						
									for(int z=0;z<32;z++){
											if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
											}
									}
									fprintf(mips_text, "mul.s $f%d , $f%d , %s\n",f2,f1,nd2->SymbolNode->regist);
									f[f1]=0;
									
									char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										multf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										multf=f2;
										return;
									  }
								
							   }
							   //on the left side is register and on the right number  ex. i(int)*2.2
							   else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd2->SymbolNode->regist)==1){
				
								    float tmp=atof(nd2->SymbolNode->regist);    
									int encoding = *((int *)&tmp);				
									int t1,f1,f2,f3;
									for(int i=0;i<10;i++){
										 
										 if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;				
											break;
										 }
									}
									for(int j=0;j<32;j++){
										 if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
										 }
									}
									f[f1]=1;
									
									fprintf(mips_text, "\nli   $t%d , %d \n",t1,encoding);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f1);
									
									for(int z=0;z<32;z++){
										 if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
										 }
									}
									
									f[f2]=1;
	
									fprintf(mips_text, "mtc1 %s, $f%d\n",nd1->SymbolNode->regist,f2);
									fprintf(mips_text, "cvt.s.w $f%d, $f%d\n",f2,f2);
									
									f[f2]=1;
									for(int y=0;y<32;y++){
										 if(f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
											f3=y;				
											break;
										 }
									}
									
									
									fprintf(mips_text, "mul.s $f%d , $f%d , $f%d \n",f3,f2,f1);
									f[f1]=0;
									f[f2]=0;
									
									
									char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										multf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										multf=f3;
										return;
									  }
											
									
							  }
							  //both are registers i(int)*bub(float)
							  else{
								 
									int f1,f2;
									for(int i=0;i<32;i++){
										 if(f[i]==0 && i!=addf && i!=subf && i!=multf && i!=divf && i!=facf){
											f1=i;				
											break;
										 }
									}
									
									fprintf(mips_text, "mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d \n",f1,f1);
									
									f[f1]=1;
									for(int j=0;j<32;j++){
										 if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f2=j;				
											break;
										 }
									}
									
									fprintf(mips_text, "mul.s $f%d , $f%d , %s\n",f2,f1,nd2->SymbolNode->regist);
									f[f1]=0;
									
									char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										multf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										multf=f2;
										return;
									  }
							  }
						
							  
						  
					
					break;
					
					case 3: //3  multiply  float+integer
					
					//both are numbers  psh 2.2*2
							   if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd2->SymbolNode->regist)==1){
									
									int t1,f1,f2,f3;
									
									for(int i=0;i<10;i++){
											if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;					
											break;
											}
									}
									
									for(int j=0;j<32;j++){
											if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
											}
									}
									
									float tmp=atof(nd1->SymbolNode->regist);     	
									int encoding = *((int *)&tmp);	
									
									fprintf(mips_text, "\nli   $t%d , %d \n",t1,encoding);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f1);
									f[f1]=1;
									
									
									fprintf(mips_text, "li   $t%d , %d \n",t1,nd2->SymbolNode->timi);
									
									for(int z=0;z<32;z++){
											if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
											}
									}
									fprintf(mips_text, "mtc1    $t%d , $f%d\n",t1,f2);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d\n",f2,f2);
									f[f2]=1;
									
									for(int y=0;y<32;y++){
											if(f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
											f3=y;				
											break;
											}
									}
									fprintf(mips_text, "mul.s $f%d , $f%d , $f%d \n",f3,f1,f2);
									f[f1]=0;
									f[f2]=0;
									
									char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										multf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										multf=f3;
										return;
									  }
									
									
									
							   }
							   //on the left side is number and on the right register  ex. 2.2*i(int)
							   else  if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd2->SymbolNode->regist)==0){
								
									int t1,f1,f2,f3;
									
									for(int i=0;i<10;i++){
										
										 if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;					
											break;
											}
									}
									
									for(int j=0;j<32;j++){
											if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
											}
									}
									
									float tmp=atof(nd1->SymbolNode->regist);     	
									int encoding = *((int *)&tmp);	
									
									fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f1);
									f[f1]=1;
									
						
									for(int z=0;z<32;z++){
											if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
											}
									}
									printf(" kari \n");
									fprintf(mips_text, "mtc1  %s , $f%d \n",nd2->SymbolNode->regist,f2);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d \n",f2,f2);
									f[f2]=1;
									
									for(int y=0;y<32;y++){
											if(f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
											f3=y;				
											break;
											}
									}
									fprintf(mips_text, "mul.s $f%d , $f%d , $f%d \n",f3,f1,f2);
									f[f1]=0;
									f[f2]=0;
									
									char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										multf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										multf=f3;
										return;
									  }
								
							   }
							   //on the left side is register and on the right number  ex. bub(float)*2
							   else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd2->SymbolNode->regist)==1){
				
								   
									int t1,f1,f2;
									for(int i=0;i<10;i++){
										 if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;				
											break;
										 }
									}
									for(int j=0;j<32;j++){
										 if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
										 }
									}
									
									
									fprintf(mips_text, "li   $t%d , %d \n",t1,nd2->SymbolNode->timi);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d\n",f1,f1);
									
									f[f1]=1;
									
									for(int z=0;z<32;z++){
										 if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
										 }
									}
									
									
									fprintf(mips_text, "mul.s $f%d , %s , $f%d \n",f2,nd1->SymbolNode->regist,f1);
									f[f1]=0;
									
									
									char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										multf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										multf=f2;
										return;
									  }
											
									
							  }
							  //both are registers bub(float)*i(int)
							  else{
								 
									int f1,f2;
									for(int i=0;i<32;i++){
										 if(f[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											f1=i;				
											break;
										 }
									}
									
									fprintf(mips_text, "mtc1    %s , $f%d \n",nd2->SymbolNode->regist,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d \n",f1,f1);
									
									f[f1]=1;
									for(int j=0;j<32;j++){
										 if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f2=j;				
											break;
										 }
									}
									
									fprintf(mips_text, "mul.s $f%d , %s , $f%d \n",f2,nd1->SymbolNode->regist,f1);
									f[f1]=0;
									
									char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										multf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										multf=f2;
										return;
									  }
							  }
						
					
					
					
					
					
					break;
					
					case 4: //4  multiply  two floats
					
						//both are numbers  2.2*3.4
						if(isFloat(nd1->SymbolNode->regist)==1  && isFloat(nd2->SymbolNode->regist)==1){	 
							  
								 int t1,f1,f2,f3;
								 for(int i=0;i<10;i++){
								   if (t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									  t1=i;
									  break;
								   }
								}
								 for(int j=0;j<32;j++){
								   if (f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
									  f1=j;
									  break;
								   }
								}
								 float tmp=atof(nd1->SymbolNode->regist);				
								 int encoding = *((int *)&tmp);
								 
								 fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
								 fprintf(mips_text, "mtc1 $t%d , $f%d \n",t1,f1);
								 f[f1]=1;
							
								 for(int y=0;y<32;y++){
								   if (f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
									  f2=y;
									  break;
								   }
								 }
								 
								 float tmp2=atof(nd2->SymbolNode->regist);				
								 int encoding2 = *((int *)&tmp2);
								 
								 fprintf(mips_text, "li   $t%d , %d \n",t1,encoding2);
								 fprintf(mips_text, "mtc1 $t%d , $f%d \n",t1,f2);
								 f[f2]=1;
								 
								 for(int k=0;k<32;k++){
								   if (f[k]==0 && k!=addf && k!=subf && k!=multf && k!=divf && k!=facf){
									  f3=k;
									  break;
								   }
								 }
								 fprintf(mips_text, "mul.s $f%d, $f%d ,$f%d  \n",f3,f1,f2);
								 
								  f[f1]=0; 
								  f[f2]=0;
								  
									char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										multf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										multf=f3;
										return;
									  }
								 
								
							 
						}
						
						// on the left side is register and on the right number  ex. bub(float)*3.4
						else if(isFloat(nd1->SymbolNode->regist)==0  && isFloat(nd2->SymbolNode->regist)==1){
							
								int t1,f1,f2;
								 for(int i=0;i<10;i++){
								   if (t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									  t1=i;
									  break;
								   }
								}
								 for(int j=0;j<32;j++){
								   if (f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
									  f1=j;
									  break;
								   }
								}
								 float tmp=atof(nd2->SymbolNode->regist);				
								 int encoding = *((int *)&tmp);
								 
								 fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
								 fprintf(mips_text, "mtc1 $t%d , $f%d \n",t1,f1);
								 f[f1]=1;
							
								 for(int y=0;y<32;y++){
								   if (f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
									  f2=y;
									  break;
								   }
								 }
								 
								 fprintf(mips_text, "mul.s $f%d, %s ,$f%d  \n",f2,nd1->SymbolNode->regist,f1);
								  f[f1]=0; 
								  
								  char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										multf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										multf=f2;
										return;
									  }
						
						
						}
						
						// on the left side is number and on the right register  ex.3.4+bub(float)
						else if(isFloat(nd1->SymbolNode->regist)==1  && isFloat(nd2->SymbolNode->regist)==0){
						
								int t1,f1,f2;
								 for(int i=0;i<10;i++){
								   if (t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									  t1=i;
									  break;
								   }
								}
								 for(int j=0;j<32;j++){
								   if (f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
									  f1=j;
									  break;
								   }
								}
								 float tmp=atof(nd1->SymbolNode->regist);				
								 int encoding = *((int *)&tmp);
								 
								 fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
								 fprintf(mips_text, "mtc1 $t%d , $f%d \n",t1,f1);
								 f[f1]=1;
							
								 for(int y=0;y<32;y++){
								   if (f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
									  f2=y;
									  break;
								   }
								 }
								 
								 fprintf(mips_text, "mul.s $f%d, $f%d , %s  \n",f2,f1,nd2->SymbolNode->regist);
								  f[f1]=0; 
								  
								  char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										multf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										multf=f2;
										return;
									  }
						
						
						
						
						}	  
						//both are registers 
						else{
						
								int f1;
								 for(int i=0;i<32;i++){
								   if (f[i]==0 && i!=addf && i!=subf && i!=multf && i!=divf && i!=facf){
									  f1=i;
									  break;
								   }
								}
								  fprintf(mips_text, "mul.s  $f%d , %s , %s \n",f1,nd1->SymbolNode->regist,nd2->SymbolNode->regist); 
								  
								  
								  char str[] = "$f";
									if(f1>=10){
										
										char str3[3];
										itoa(f1,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										multf=f1;
										return;
									 
									 } 
									 else{
										char c = f1+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										multf=f1;
										return;
									  }
							  }
						  
					
					break;
				}
}

void div_generation(AstNode* nd, AstNode* nd1, AstNode* nd2,int i){
			
			
			switch(i)
				{				
					case 1: //1  divide two integers
					
					
						// both are numbers  2/2
							 
							 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd2->SymbolNode->regist)==1){
								
								int t1,t2;
								for(int i=0;i<10;i++){
									if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									t1=i;					
									break;
									}
								}
								if(strcmp(nd2->SymbolNode->regist,"0")==0){
									fprintf(mips_text, "divu  $t%d , $t%d , $zero\n",t1,t1);
								}
								else{
									fprintf(mips_text, "li   $t%d , %d \n",t1,nd1->SymbolNode->timi);
									fprintf(mips_text, "divu  $t%d , $t%d , %d \n",t1,t1,nd2->SymbolNode->timi);
								}
							  char str[] = "$t";
							  char c = t1+'0';
							  size_t len = strlen(str);
							  char str2[len + 1 + 1] ; 
							  strcpy(str2, str);
							  str2[len] = c;
							  str2[len + 1] = '\0';
							  divt=t1;
							  
							  strcpy(nd->SymbolNode->regist,str2);
							  return;
							  
							  
							  }
							  
							// on the left side is number and on the right register  ex. 2/i(int)
						else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd2->SymbolNode->regist)==0){
						
							    int t1;
								for(int i=0;i<10;i++){
									if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									t1=i;					
									break;
									}
								}
								
							  fprintf(mips_text, "li $t%d , %d \n",t1,nd1->SymbolNode->timi);
							  fprintf(mips_text, "divu $t%d , $t%d , %s \n",t1,t1,nd2->SymbolNode->regist);
							  char str[] = "$t";
							  char c = t1+'0';
							  size_t len = strlen(str);
							  char str2[len + 1 + 1] ; 
							  strcpy(str2, str);
							  str2[len] = c;
							  str2[len + 1] = '\0';
							  divt=t1;
							  
							  strcpy(nd->SymbolNode->regist,str2);
							  return;
							  
							  }
						
						//on the left side is register and on the right number  ex. i(int)/2
						else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd2->SymbolNode->regist)==1){
								  
							    int t1;
								for(int i=0;i<10;i++){
									if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									t1=i;					
									break;
									}
								}
								if(strcmp(nd2->SymbolNode->regist,"0")==0){
									fprintf(mips_text, "divu  $t%d , %s , $zero\n",t1,nd1->SymbolNode->regist);
								}
								else{	
									fprintf(mips_text, "divu $t%d , %s , %d \n",t1,nd1->SymbolNode->regist,nd2->SymbolNode->timi);
								}
								char str[] = "$t";
								  char c = t1+'0';
								  size_t len = strlen(str);
								  char str2[len + 1 + 1] ; 
								  strcpy(str2, str);
								  str2[len] = c;
								  str2[len + 1] = '\0';
								  divt=t1;
								  
								  strcpy(nd->SymbolNode->regist,str2);
								  return;
							  
							  }
							  
						// both are registers  i(int)/j(int)
						else{	  
							    
							  int t1;
								for(int i=0;i<10;i++){
									if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									t1=i;					
									break;
									}
								}
							  fprintf(mips_text, "div  $t%d , %s , %s \n",t1,nd1->SymbolNode->regist,nd2->SymbolNode->regist); 
							 
							 
							  char str[] = "$t";
							  char c = t1+'0';
							  size_t len = strlen(str);
							  char str2[len + 1 + 1] ; 
							  strcpy(str2, str);
							  str2[len] = c;
							  str2[len + 1] = '\0';
							  strcpy(nd->SymbolNode->regist,str2);
							  divt=t1;
							  return;
							  
							} 
						
					break;
					
					case 2: //2  divide integer/float
						
							   //both are nuumbers   psh 2/2.2
							   if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd2->SymbolNode->regist)==1){
									
									int t1,f1,f2,f3;
									for(int i=0;i<10;i++){
											if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;					
											break;
											}
									}
									fprintf(mips_text, "li      $t%d , %d \n",t1,nd1->SymbolNode->timi);
									
									for(int j=0;j<32;j++){
											if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
											}
									}
									fprintf(mips_text, "mtc1    $t%d , $f%d\n",t1,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d\n",f1,f1);
									f[f1]=1;
									
									for(int z=0;z<32;z++){
											if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
											}
									}
									
									float tmp=atof(nd2->SymbolNode->regist);     	
									int encoding = *((int *)&tmp);	
									
									fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f2);
									
									f[f2]=1;
									for(int y=0;y<32;y++){
											if(f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
											f3=y;				
											break;
											}
									}
									fprintf(mips_text, "div.s $f%d , $f%d , $f%d \n",f3,f1,f2);
									f[f1]=0;
									f[f2]=0;
									
									char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										divf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										divf=f3;
										return;
									  }
									
									
									
							   }
							   //on the left side is number and on the right register  ex. 2/bub(float)
							   else  if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd2->SymbolNode->regist)==0){
								
									int t1,f1,f2,f3;
									for(int i=0;i<10;i++){
											if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;				
											break;
											}
									}
									fprintf(mips_text, "li      $t%d , %d \n",t1,nd1->SymbolNode->timi);
									
									for(int j=0;j<32;j++){
											if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
											}
									}
									fprintf(mips_text, "mtc1    $t%d , $f%d\n",t1,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d\n",f1,f1);
									f[f1]=1;
						
									for(int z=0;z<32;z++){
											if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
											}
									}
									fprintf(mips_text, "div.s $f%d , $f%d , %s\n",f2,f1,nd2->SymbolNode->regist);
									f[f1]=0;
									
									char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										divf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										divf=f2;
										return;
									  }
								
							   }
							   //on the left side is register and on the right number ex. i(int)/2.2
							   else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd2->SymbolNode->regist)==1){
				
								    float tmp=atof(nd2->SymbolNode->regist);     
									int encoding = *((int *)&tmp);				
									int t1,f1,f2,f3;
									
									for(int i=0;i<10;i++){
										 if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;				
											break;
										 }
									}
									for(int j=0;j<32;j++){
										 if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
										 }
									}
									f[f1]=1;
									
									fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f1);
									
									for(int z=0;z<32;z++){
										 if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
										 }
									}
									
									f[f2]=1;
	
									fprintf(mips_text, "mtc1 %s, $f%d\n",nd1->SymbolNode->regist,f2);
									fprintf(mips_text, "cvt.s.w $f%d, $f%d\n",f2,f2);
									
									f[f2]=1;
									for(int y=0;y<32;y++){
										 if(f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
											f3=y;				
											break;
										 }
									}
									
									
									fprintf(mips_text, "div.s $f%d , $f%d , $f%d \n",f3,f2,f1);
									f[f1]=0;
									f[f2]=0;
									
									
									char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										divf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										divf=f3;
										return;
									  }
									
							  }
							  //both are registers i(int)/bub(float)
							  else{
								 
									int f1,f2;
									for(int i=0;i<32;i++){
										 if(f[i]==0 && i!=addf && i!=subf && i!=multf && i!=divf && i!=facf){
											f1=i;				
											break;
										 }
									}
									
									fprintf(mips_text, "mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d \n",f1,f1);
									
									f[f1]=1;
									for(int j=0;j<32;j++){
										 if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f2=j;				
											break;
										 }
									}
									
									fprintf(mips_text, "div.s $f%d , $f%d , %s\n",f2,f1,nd2->SymbolNode->regist);
									f[f1]=0;
									
									char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										divf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										divf=f2;
										return;
									  }
							  }
						
							  
						  
					
					break;
					
					case 3: //3  divide  float/integer
					
					//both are numbers  2.2/2
							   if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd2->SymbolNode->regist)==1){
									
									int t1,f1,f2,f3;
									
									for(int i=0;i<10;i++){
											if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;					
											break;
											}
									}
									
									for(int j=0;j<32;j++){
											if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
											}
									}
									
									float tmp=atof(nd1->SymbolNode->regist);     	
									int encoding = *((int *)&tmp);	
									
									fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f1);
									f[f1]=1;
									
									
									fprintf(mips_text, "li   $t%d , %d \n",t1,nd2->SymbolNode->timi);
									
									for(int z=0;z<32;z++){
											if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
											}
									}
									fprintf(mips_text, "mtc1    $t%d , $f%d\n",t1,f2);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d\n",f2,f2);
									f[f2]=1;
									
									for(int y=0;y<32;y++){
											if(f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf) {
											f3=y;				
											break;
											}
									}
									fprintf(mips_text, "div.s $f%d , $f%d , $f%d \n",f3,f1,f2);
									f[f1]=0;
									f[f2]=0;
									
									char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										divf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										divf=f3;
										return;
									  }
									
									
									
							   }
							   //on the left side is number and on the right register  ex. 2.2/i(int)
							   else  if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd2->SymbolNode->regist)==0){
								
									int t1,f1,f2,f3;
									
									for(int i=0;i<10;i++){
										
										 if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;					
											break;
											}
									}
									
									for(int j=0;j<32;j++){
											if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
											}
									}
									
									float tmp=atof(nd1->SymbolNode->regist);     	
									int encoding = *((int *)&tmp);	
									
									fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f1);
									f[f1]=1;
									
						
									for(int z=0;z<32;z++){
											if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
											}
									}
									printf(" kari \n");
									fprintf(mips_text, "mtc1  %s , $f%d \n",nd2->SymbolNode->regist,f2);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d \n",f2,f2);
									f[f2]=1;
									
									for(int y=0;y<32;y++){
											if(f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
											f3=y;				
											break;
											}
									}
									fprintf(mips_text, "div.s $f%d , $f%d , $f%d \n",f3,f1,f2);
									f[f1]=0;
									f[f2]=0;
									
									char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										divf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										divf=f3;
										return;
									  }
								
							   }
							   //on the left side is register and on the right number  ex. bub(float)/2
							   else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd2->SymbolNode->regist)==1){
				
								   
									int t1,f1,f2;
									for(int i=0;i<10;i++){
										 if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;				
											break;
										 }
									}
									for(int j=0;j<32;j++){
										 if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
										 }
									}
									
									
									fprintf(mips_text, "li   $t%d , %d \n",t1,nd2->SymbolNode->timi);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d\n",f1,f1);
									
									f[f1]=1;
									
									for(int z=0;z<32;z++){
										 if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
										 }
									}
									
									
									fprintf(mips_text, "div.s $f%d , %s , $f%d \n",f2,nd1->SymbolNode->regist,f1);
									f[f1]=0;
									
									
									char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										divf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										divf=f2;
										return;
									  }
											
									
							  }
							  //both are registers  bub(float)/i(int)
							  else{
								 
									int f1,f2;
									for(int i=0;i<32;i++){
										 if(f[i]==0 && i!=addf && i!=subf && i!=multf && i!=divf && i!=facf){
											f1=i;				
											break;
										 }
									}
									
									fprintf(mips_text, "mtc1    %s , $f%d \n",nd2->SymbolNode->regist,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d \n",f1,f1);
									
									f[f1]=1;
									for(int j=0;j<32;j++){
										 if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f2=j;				
											break;
										 }
									}
									
									fprintf(mips_text, "div.s $f%d , %s , $f%d \n",f2,nd1->SymbolNode->regist,f1);
									f[f1]=0;
									
									char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										divf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										divf=f2;
										return;
									  }
							  }
						
					
					
					
					
					
					break;
					
					case 4: //4  divide two floats
					
						//both are numbers  2.2/3.4
						if(isFloat(nd1->SymbolNode->regist)==1  && isFloat(nd2->SymbolNode->regist)==1){	 
							  
								 int t1,f1,f2,f3;
								 for(int i=0;i<10;i++){
								   if (t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									  t1=i;
									  break;
								   }
								}
								 for(int j=0;j<32;j++){
								   if (f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
									  f1=j;
									  break;
								   }
								}
								 float tmp=atof(nd1->SymbolNode->regist);				
								 int encoding = *((int *)&tmp);
								 
								 fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
								 fprintf(mips_text, "mtc1 $t%d , $f%d \n",t1,f1);
								 f[f1]=1;
							
								 for(int y=0;y<32;y++){
								   if (f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
									  f2=y;
									  break;
								   }
								 }
								 
								 float tmp2=atof(nd2->SymbolNode->regist);				
								 int encoding2 = *((int *)&tmp2);
								 
								 fprintf(mips_text, "li   $t%d , %d \n",t1,encoding2);
								 fprintf(mips_text, "mtc1 $t%d , $f%d \n",t1,f2);
								 f[f2]=1;
								 
								 for(int k=0;k<32;k++){
								   if (f[k]==0 && k!=addf && k!=subf && k!=multf && k!=divf && k!=facf){
									  f3=k;
									  break;
								   }
								 }
								 fprintf(mips_text, "div.s $f%d, $f%d ,$f%d  \n",f3,f1,f2);
								 
								  f[f1]=0; 
								  f[f2]=0;
								  
								  char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										divf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										divf=f3;
										return;
									  }
								 
								
							 
						}
						
						// on the left side is register and on the right number  ex. bub(float)/3.4
						else if(isFloat(nd1->SymbolNode->regist)==0  && isFloat(nd2->SymbolNode->regist)==1){
							
								int t1,f1,f2;
								 for(int i=0;i<10;i++){
								   if (t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									  t1=i;
									  break;
								   }
								}
								 for(int j=0;j<32;j++){
								   if (f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
									  f1=j;
									  break;
								   }
								}
								 float tmp=atof(nd2->SymbolNode->regist);				
								 int encoding = *((int *)&tmp);
								 
								 fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
								 fprintf(mips_text, "mtc1 $t%d , $f%d \n",t1,f1);
								 f[f1]=1;
							
								 for(int y=0;y<32;y++){
								   if (f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
									  f2=y;
									  break;
								   }
								 }
								 
								 fprintf(mips_text, "div.s $f%d, %s ,$f%d  \n",f2,nd1->SymbolNode->regist,f1);
								  f[f1]=0; 
								  
								  char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										divf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										divf=f2;
										return;
									  }
						
						
						}
						
						// on the left side is number and on the right register  ex. 3.4/bub(float)
						else if(isFloat(nd1->SymbolNode->regist)==1  && isFloat(nd2->SymbolNode->regist)==0){
						
								int t1,f1,f2;
								 for(int i=0;i<10;i++){
								   if (t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									  t1=i;
									  break;
								   }
								}
								 for(int j=0;j<32;j++){
								   if (f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
									  f1=j;
									  break;
								   }
								}
								 float tmp=atof(nd1->SymbolNode->regist);				
								 int encoding = *((int *)&tmp);
								 
								 fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
								 fprintf(mips_text, "mtc1 $t%d , $f%d \n",t1,f1);
								 f[f1]=1;
							
								 for(int y=0;y<32;y++){
								   if (f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
									  f2=y;
									  break;
								   }
								 }
								 
								 fprintf(mips_text, "div.s $f%d, $f%d , %s  \n",f2,f1,nd2->SymbolNode->regist);
								  f[f1]=0; 
								  
								  char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										divf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										divf=f2;
										return;
									  }
						
						
						
						
						}	  
						//both are registers
						else{
						
								int f1;
								 for(int i=0;i<32;i++){
								   if (f[i]==0 && i!=addf && i!=subf && i!=multf && i!=divf && i!=facf){
									  f1=i;
									  break;
								   }
								}
								  fprintf(mips_text, "div.s  $f%d , %s , %s \n",f1,nd1->SymbolNode->regist,nd2->SymbolNode->regist); 
								  
								  
								  char str[] = "$f";
									if(f1>=10){
										
										char str3[3];
										itoa(f1,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										divf=f1;
										return;
									 
									 } 
									 else{
										char c = f1+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										divf=f1;
										return;
									  }
							  }
						  
					
					break;
				}
				
}
void subtract_generation(AstNode* nd, AstNode* nd1, AstNode* nd2,int i){

			switch(i)
				{				
					case 1: //1  substract two integers
					
					
						// both are numbers  2-2
							 
							 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd2->SymbolNode->regist)==1){
								
								int t1,t2;
								for(int i=0;i<10;i++){
									if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									t1=i;					
									break;
									}
								}
								fprintf(mips_text, "li   $t%d , %d \n",t1,nd1->SymbolNode->timi);
								fprintf(mips_text, "subi  $t%d , $t%d , %d \n",t1,t1,nd2->SymbolNode->timi);
								
							  char str[] = "$t";
							  char c = t1+'0';
							  size_t len = strlen(str);
							  char str2[len + 1 + 1] ; 
							  strcpy(str2, str);
							  str2[len] = c;
							  str2[len + 1] = '\0';
							  strcpy(nd->SymbolNode->regist,str2);
							  subt=t1;
							  return;
							  
							  
							  }
							  
							// on the left side is number and on the right register  ex. 2-i(int)
						else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd2->SymbolNode->regist)==0){
						
							    int t1;
								for(int i=0;i<10;i++){
									if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									t1=i;					
									break;
									}
								}
							  fprintf(mips_text, "subi $t%d , %s , %d \n",t1,nd2->SymbolNode->regist,nd1->SymbolNode->timi);
							  char str[] = "$t";
							  char c = t1+'0';
							  size_t len = strlen(str);
							  char str2[len + 1 + 1] ; 
							  strcpy(str2, str);
							  str2[len] = c;
							  str2[len + 1] = '\0';
							  subt=t1;
							  strcpy(nd->SymbolNode->regist,str2);
							  return;
							  
							  }
						
						// on the left side is register and on the right number  ex. i(int)-2
						else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd2->SymbolNode->regist)==1){
								  
							    int t1;
								for(int i=0;i<10;i++){
									if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									t1=i;					
									break;
									}
								}
							  fprintf(mips_text, "subi $t%d , %s , %d \n",t1,nd1->SymbolNode->regist,nd2->SymbolNode->timi);
							  char str[] = "$t";
							  char c = t1+'0';
							  size_t len = strlen(str);
							  char str2[len + 1 + 1] ; 
							  strcpy(str2, str);
							  str2[len] = c;
							  str2[len + 1] = '\0';
							  subt=t1;
							  strcpy(nd->SymbolNode->regist,str2);
							  return;
							  
							  }
							  
						// both are registers  i(int)-j(int)
						else{	  
							    
							  int t1;
								for(int i=0;i<10;i++){
									if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									t1=i;					
									break;
									}
								}
							  fprintf(mips_text, "sub  $t%d , %s , %s \n",t1,nd1->SymbolNode->regist,nd2->SymbolNode->regist); 
							 
							 
							  char str[] = "$t";
							  char c = t1+'0';
							  size_t len = strlen(str);
							  char str2[len + 1 + 1] ; 
							  strcpy(str2, str);
							  str2[len] = c;
							  str2[len + 1] = '\0';
							  strcpy(nd->SymbolNode->regist,str2);
							  subt=t1;
							  return;
							  
							} 
						
					break;
					
					case 2: //2  subtract  integer+float
						
							   //both are numbers  2-2.2
							   if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd2->SymbolNode->regist)==1){
									
									int t1,f1,f2,f3;
									for(int i=0;i<10;i++){
											if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;					
											break;
											}
									}
									fprintf(mips_text, "li      $t%d , %d \n",t1,nd1->SymbolNode->timi);
									
									for(int j=0;j<32;j++){
											if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
											}
									}
									fprintf(mips_text, "mtc1    $t%d , $f%d\n",t1,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d\n",f1,f1);
									f[f1]=1;
									
									for(int z=0;z<32;z++){
											if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
											}
									}
									
									float tmp=atof(nd2->SymbolNode->regist);     	
									int encoding = *((int *)&tmp);	
									
									fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f2);
									
									f[f2]=1;
									for(int y=0;y<32;y++){
											if(f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
											f3=y;				
											break;
											}
									}
									fprintf(mips_text, "sub.s $f%d , $f%d , $f%d \n",f3,f1,f2);
									f[f1]=0;
									f[f2]=0;
									
									char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										subf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										subf=f3;
										return;
									  }
									
									
									
							   }
							   //on the left side is number and on the right register  ex. 2-bub(float)
							   else  if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd2->SymbolNode->regist)==0){
								
									int t1,f1,f2,f3;
									for(int i=0;i<10;i++){
											if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;				
											break;
											}
									}
									fprintf(mips_text, "li      $t%d , %d \n",t1,nd1->SymbolNode->timi);
									
									for(int j=0;j<32;j++){
											if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
											}
									}
									fprintf(mips_text, "mtc1    $t%d , $f%d\n",t1,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d\n",f1,f1);
									f[f1]=1;
						
									for(int z=0;z<32;z++){
											if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
											}
									}
									fprintf(mips_text, "sub.s $f%d , $f%d , %s\n",f2,f1,nd2->SymbolNode->regist);
									f[f1]=0;
									
									char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										subf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										subf=f2;
										return;
									  }
								
							   }
							   //on the left side is register and on the right number  ex. i(int)-2.2
							   else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd2->SymbolNode->regist)==1){
				
								    float tmp=atof(nd2->SymbolNode->regist);     
									int encoding = *((int *)&tmp);				
									int t1,f1,f2,f3;
									for(int i=0;i<10;i++){
										
										 if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;				
											break;
										 }
									}
									for(int j=0;j<32;j++){
										 if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
										 }
									}
									f[f1]=1;
									
									fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f1);
									
									for(int z=0;z<32;z++){
										 if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
										 }
									}
									
									f[f2]=1;
	
									fprintf(mips_text, "mtc1 %s, $f%d\n",nd1->SymbolNode->regist,f2);
									fprintf(mips_text, "cvt.s.w $f%d, $f%d\n",f2,f2);
									
									f[f2]=1;
									for(int y=0;y<32;y++){
										 if(f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
											f3=y;				
											break;
										 }
									}
									
									
									fprintf(mips_text, "sub.s $f%d , $f%d , $f%d \n",f3,f2,f1);
									f[f1]=0;
									f[f2]=0;
									
									
									char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										subf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										subf=f3;
										return;
									  }
											
									
							  }
							  //both are registers i(int)-bub(float)
							  else{
								 
									int f1,f2;
									for(int i=0;i<32;i++){
										 if(f[i]==0 && i!=addf && i!=subf && i!=multf && i!=divf && i!=facf){
											f1=i;				
											break;
										 }
									}
									
									fprintf(mips_text, "mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d \n",f1,f1);
									
									f[f1]=1;
									for(int j=0;j<32;j++){
										 if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f2=j;				
											break;
										 }
									}
									
									fprintf(mips_text, "sub.s $f%d , $f%d , %s\n",f2,f1,nd2->SymbolNode->regist);
									f[f1]=0;
									
									char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										subf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										subf=f2;
										return;
									  }
							  }
						
							  
						  
					
					break;
					
					case 3: //3  subtract  float-integer
					
					//both are numbers  2.2-2
							   if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd2->SymbolNode->regist)==1){
									
									int t1,f1,f2,f3;
									
									for(int i=0;i<10;i++){
											if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;					
											break;
											}
									}
									
									for(int j=0;j<32;j++){
											if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
											}
									}
									
									float tmp=atof(nd1->SymbolNode->regist);     	
									int encoding = *((int *)&tmp);	
									
									fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f1);
									f[f1]=1;
									
									
									fprintf(mips_text, "li   $t%d , %d \n",t1,nd2->SymbolNode->timi);
									
									for(int z=0;z<32;z++){
											if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
											}
									}
									fprintf(mips_text, "mtc1    $t%d , $f%d\n",t1,f2);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d\n",f2,f2);
									f[f2]=1;
									
									for(int y=0;y<32;y++){
											if(f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
											f3=y;				
											break;
											}
									}
									fprintf(mips_text, "sub.s $f%d , $f%d , $f%d \n",f3,f1,f2);
									f[f1]=0;
									f[f2]=0;
									
									char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										subf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										subf=f3;
										return;
									  }
									
									
							   }
							   //on the left side is number and on the right register  ex. 2.2-i(int)
							   else  if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd2->SymbolNode->regist)==0){
								
									
									
									int t1,f1,f2,f3;
									
									for(int i=0;i<10;i++){
										 //char ch = nd2->SymbolNode->regist[2];
										 //int ia = ch - '0';
										 if(t[i]==0 /*&& i!=ia*/ && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;					
											break;
											}
									}
									
									for(int j=0;j<32;j++){
											if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
											}
									}
									
									float tmp=atof(nd1->SymbolNode->regist);     	
									int encoding = *((int *)&tmp);	
									
									fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f1);
									f[f1]=1;
									
						
									for(int z=0;z<32;z++){
											if(f[z]==0  && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
											}
									}
									
									fprintf(mips_text, "mtc1  %s , $f%d \n",nd2->SymbolNode->regist,f2);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d \n",f2,f2);
									f[f2]=1;
									
									for(int y=0;y<32;y++){
											if(f[y]==0 & y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
											f3=y;				
											break;
											}
									}
									fprintf(mips_text, "sub.s $f%d , $f%d , $f%d \n",f3,f1,f2);
									f[f1]=0;
									f[f2]=0;
									
									char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										subf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0'; 
										size_t len = strlen(str); 
										char str2[len + 1 + 1] ;  
										strcpy(str2, str); 
										str2[len] = c; 
										str2[len + 1] = '\0'; 
										strcpy(nd->SymbolNode->regist,str2); 
										subf=f3; 
										return; 
									  }
								
							   }
							   //on the left side is register and on the right number  ex. bub(float)-2
							   else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd2->SymbolNode->regist)==1){
				
								    
									int t1,f1,f2;
									for(int i=0;i<10;i++){
										 if(t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
											t1=i;				
											break;
										 }
									}
									for(int j=0;j<32;j++){
										 if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f1=j;				
											break;
										 }
									}
									
									
									fprintf(mips_text, "li   $t%d , %d \n",t1,nd2->SymbolNode->timi);
									fprintf(mips_text, "mtc1 $t%d , $f%d\n",t1,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d\n",f1,f1);
									
									f[f1]=1;
									
									for(int z=0;z<32;z++){
										 if(f[z]==0 && z!=addf && z!=subf && z!=multf && z!=divf && z!=facf){
											f2=z;				
											break;
										 }
									}
									
									
									fprintf(mips_text, "sub.s $f%d , %s , $f%d \n",f2,nd1->SymbolNode->regist,f1);
									f[f1]=0;
									
									
									char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										subf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										subf=f2;
										return;
									  }
									
							  }
							  //both are registers bub(float)-i(int)
							  else{
									
								
									int f1,f2;
									for(int i=0;i<32;i++){
										 if(f[i]==0 &&  i!=addf && i!=subf && i!=multf && i!=divf && i!=facf){
											f1=i;				
											break;
										 }
									}
									
									fprintf(mips_text, "mtc1    %s , $f%d \n",nd2->SymbolNode->regist,f1);
									fprintf(mips_text, "cvt.s.w $f%d , $f%d \n",f1,f1);
									
									f[f1]=1;
									for(int j=0;j<32;j++){
										 if(f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
											f2=j;				
											break;
										 }
									}
									
									fprintf(mips_text, "sub.s $f%d , %s , $f%d \n",f2,nd1->SymbolNode->regist,f1);
									f[f1]=0;
									
									
									char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										subf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										subf=f2;
										return;
									  }
							  }
						
					
					
					
					
					
					break;
					
					case 4: //4  subtract two floats
					
						//both are numbers  2.2-3.4
						if(isFloat(nd1->SymbolNode->regist)==1  && isFloat(nd2->SymbolNode->regist)==1){	 
							  
								 int t1,f1,f2,f3;
								 for(int i=0;i<10;i++){
								   if (t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									  t1=i;
									  break;
								   }
								}
								 for(int j=0;j<32;j++){
								   if (f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
									  f1=j;
									  break;
								   }
								}
								 float tmp=atof(nd1->SymbolNode->regist);				
								 int encoding = *((int *)&tmp);
								 
								 fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
								 fprintf(mips_text, "mtc1 $t%d , $f%d \n",t1,f1);
								 f[f1]=1;
							
								 for(int y=0;y<32;y++){
								   if (f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
									  f2=y;
									  break;
								   }
								 }
								 
								 float tmp2=atof(nd2->SymbolNode->regist);				
								 int encoding2 = *((int *)&tmp2);
								 
								 fprintf(mips_text, "li   $t%d , %d \n",t1,encoding2);
								 fprintf(mips_text, "mtc1 $t%d , $f%d \n",t1,f2);
								 f[f2]=1;
								 
								 for(int k=0;k<32;k++){
								   if (f[k]==0 && k!=addf && k!=subf && k!=multf && k!=divf && k!=facf){
									  f3=k;
									  break;
								   }
								 }
								 fprintf(mips_text, "sub.s $f%d, $f%d ,$f%d  \n",f3,f1,f2);
								 
								  f[f1]=0; 
								  f[f2]=0;
								  
								  char str[] = "$f";
									if(f3>=10){
										
										char str3[3];
										itoa(f3,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										subf=f3;
										return;
									 
									 } 
									 else{
										char c = f3+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										subf=f3;
										return;
									  }
								 
								
							 
						}
						
						//on the left side is register and on the right number  ex. bub(float)-3.4
						else if(isFloat(nd1->SymbolNode->regist)==0  && isFloat(nd2->SymbolNode->regist)==1){
							
								int t1,f1,f2;
								 for(int i=0;i<10;i++){
								   if (t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									  t1=i;
									  break;
								   }
								}
								 for(int j=0;j<32;j++){
								   if (f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
									  f1=j;
									  break;
								   }
								}
								 float tmp=atof(nd2->SymbolNode->regist);				
								 int encoding = *((int *)&tmp);
								 
								 fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
								 fprintf(mips_text, "mtc1 $t%d , $f%d \n",t1,f1);
								 f[f1]=1;
							
								 for(int y=0;y<32;y++){
								   if (f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
									  f2=y;
									  break;
								   }
								 }
								 
								 fprintf(mips_text, "sub.s $f%d, %s ,$f%d  \n",f2,nd1->SymbolNode->regist,f1);
								  f[f1]=0; 
								  
								  char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										subf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										subf=f2;
										return;
									  }
						
						
						}
						
						// on the left side is number and on the right register  ex.h 3.4-bub(float)
						else if(isFloat(nd1->SymbolNode->regist)==1  && isFloat(nd2->SymbolNode->regist)==0){
						
								int t1,f1,f2;
								 for(int i=0;i<10;i++){
								   if (t[i]==0 && i!=addt && i!=subt && i!=multt && i!=divt && i!=fact){
									  t1=i;
									  break;
								   }
								}
								 for(int j=0;j<32;j++){
								   if (f[j]==0 && j!=addf && j!=subf && j!=multf && j!=divf && j!=facf){
									  f1=j;
									  break;
								   }
								}
								 float tmp=atof(nd1->SymbolNode->regist);				
								 int encoding = *((int *)&tmp);
								 
								 fprintf(mips_text, "li   $t%d , %d \n",t1,encoding);
								 fprintf(mips_text, "mtc1 $t%d , $f%d \n",t1,f1);
								 f[f1]=1;
							
								 for(int y=0;y<32;y++){
								   if (f[y]==0 && y!=addf && y!=subf && y!=multf && y!=divf && y!=facf){
									  f2=y;
									  break;
								   }
								 }
								 
								 fprintf(mips_text, "sub.s $f%d, $f%d , %s  \n",f2,f1,nd2->SymbolNode->regist);
								  f[f1]=0; 
								  
								  char str[] = "$f";
									if(f2>=10){
										
										char str3[3];
										itoa(f2,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										subf=f2;
										return;
									 
									 } 
									 else{
										char c = f2+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										subf=f2;
										return;
									  }
						
						
						
						
						}	  
						//both are registers 
						else{
						
								int f1;
								 for(int i=0;i<32;i++){
								   if (f[i]==0 && i!=addf && i!=subf && i!=multf && i!=divf && i!=facf){
									  f1=i;
									  break;
								   }
								}
								  fprintf(mips_text, "sub.s  $f%d , %s , %s \n",f1,nd1->SymbolNode->regist,nd2->SymbolNode->regist); 
								  
								  
								  char str[] = "$f";
									if(f1>=10){
										
										char str3[3];
										itoa(f1,str3,10);
										strcat(str, str3);
										strcpy(nd->SymbolNode->regist,str);
										subf=f1;
										return;
									 
									 } 
									 else{
										char c = f1+'0';
										size_t len = strlen(str);
										char str2[len + 1 + 1] ; 
										strcpy(str2, str);
										str2[len] = c;
										str2[len + 1] = '\0';
										strcpy(nd->SymbolNode->regist,str2);
										subf=f1;
										return;
									  }
							  }
						  
					
					break;
				}
		

}

void while_generation(AstNode* nd1,AstNode* nd2,AstNode* nd3, int i){
		
		switch(nd2->oper)
				{				
				
					case 1: //1 ==
								
								switch(i)
								{
									case 1:// both integers
									 
									 //both are numbers ex. 1==2
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_while++;
											fprintf(mips_text, "L%d: bne  $t%d, %s, exit%d \n\n",i_while,t1,nd3->SymbolNode->regist,i_while);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;
										 }
										 //on the left side is number and on the right register  ex. 2==c(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_while++;
											fprintf(mips_text, "L%d: bne  $t%d, %s, exit%d \n\n",i_while,t1,nd3->SymbolNode->regist,i_while);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;

										 }
										 //on the left side is register and on the right number  ex. c(int)==2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
											
											i_while++;
											fprintf(mips_text, "L%d: bne  %s, %s, exit%d \n\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_while);
										 
										 }
										 //both are registers c(int)==d(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
											i_while++;
											fprintf(mips_text, "L%d: bne  %s, %s, exit%d \n\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_while);
										 
										 }
										break;
									
									case 2:// on the left side is integer and on the right float
									
										//both are numbers 1==1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_while++;
											fprintf(mips_text, "L%d:	 c.eq.s  $f%d, $f%d \n\n",i_while,f1,f2);
											fprintf(mips_text, "bc1f   exit%d\n\n",i_while);	
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;	
											
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;	
											
										 }
										 //on the left side is number and on the right register  ex. 2==j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											i_while++;
											
										    fprintf(mips_text, "L%d:   c.eq.s 	$f%d,  %s \n",i_while,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;											
										 
										 }
										 
										 //on the left side is register and on the right number  ex. i(int)==2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_while++;
											
										    fprintf(mips_text, "L%d:   c.eq.s 	$f%d,   $f%d  \n",i_while,f1,f2);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
											
											
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;
											nd1->SymbolNode->convert_to_float=1;
											
										 }
										  //both are registers c(int)==j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											f[f1]=1;
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
										    i_while++;
											
										    fprintf(mips_text, "L%d:   c.eq.s 	$f%d,   %s \n",i_while,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
										
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->convert_to_float=1;
										 }
									
									break;
									
									case 3:// on the left side is float and on the right integer
										
											//both are numbers 1.5==1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													f[f2]=1;
													
													i_while++;
											
													fprintf(mips_text, "L%d:   c.eq.s 	$f%d,  $f%d \n",i_while,f1,f2);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
												
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 }
											 //on the left side is number and on the right register  ex. 2.5==i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													f[f2]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													
													i_while++;
											
												
													fprintf(mips_text, "L%d: c.eq.s 	$f%d,  $f%d\n",i_while,f2,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													nd1->SymbolNode->convert_to_float=3;
											 
											 
											 
											 }
											 //on the left side is register and on the right number  ex. j(float)==2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													f[f1]=1;
													
										
													i_while++;
											
													fprintf(mips_text, "L%d: c.eq.s 	%s,  $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											  //both are registers  j(float)==i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
											
													i_while++;
													
													fprintf(mips_text, "L%d: c.eq.s 	%s,  $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->convert_to_float=3;
											 
											 }
									
									break;
									
									case 4:// both are floats 
											
											//both are numbers  1.5==1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													f[f2]=1;
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.eq.s 	 $f%d , $f%d\n",i_while,f1,f2);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 
											 }
											 //on the left side is number and on the right register  ex. 2.5==j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
												
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.eq.s 	 $f%d , %s\n",i_while,f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											 //on the left side is register and on the right number  ex. j(float)==2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.eq.s 	%s , $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													
											 
											 }
											  //both are registers j(float)==k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.eq.s 	 %s , %s\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
											 
											 }
											
									break;
								}
						
					break;
						
					case 2: //2 <
					
								switch(i)
								{
									case 1:// both are integers 
									 
									 //both are numbers  1<2
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_while++;
											fprintf(mips_text, "L%d: bge  $t%d, %s, exit%d \n\n",i_while,t1,nd3->SymbolNode->regist,i_while);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;
										 }
										 //on the left side is number and on the right register  ex. psh 2<c(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_while++;
											fprintf(mips_text, "L%d: bge  $t%d, %s, exit%d \n\n",i_while,t1,nd3->SymbolNode->regist,i_while);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;

										 }
										 //on the left side is register and on the right number  ex. c(int)<2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
											
											i_while++;
											fprintf(mips_text, "L%d: bge  %s, %s, exit%d \n\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_while);
										 
										 }
										  //both are registers  c(int)<d(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
											i_while++;
											fprintf(mips_text, "L%d: bge  %s, %s, exit%d \n\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_while);
										 
										 }
										break;
									
									case 2:// on the left side is integer and on the right float  
									
										//both are numbers 1<1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_while++;
											fprintf(mips_text, "L%d:	 c.lt.s  $f%d, $f%d \n\n",i_while,f1,f2);
											fprintf(mips_text, "bc1f   exit%d\n\n",i_while);	
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;	
											
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;	
											
										 }
										 //on the left side is number and on the right register  ex. 2<j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											i_while++;
											
										    fprintf(mips_text, "L%d:   c.lt.s 	$f%d,  %s \n",i_while,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;											
										 
										 }
										 
										 //on the left side is register and on the right number  ex. i(int)<2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_while++;
											
										    fprintf(mips_text, "L%d:   c.lt.s 	$f%d,   $f%d  \n",i_while,f1,f2);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
											
											
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;
											nd1->SymbolNode->convert_to_float=1;
											
										 }
										  //both are registers c(int)<j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											f[f1]=1;
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
										    i_while++;
											
										    fprintf(mips_text, "L%d:   c.lt.s 	$f%d,   %s \n",i_while,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
										
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->convert_to_float=1;
										 }
									
									break;
									
									case 3:// on the left side is float and on the right integr  
										
											//both are numbers  1.5<1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													f[f2]=1;
													
													i_while++;
											
													fprintf(mips_text, "L%d:   c.lt.s 	$f%d,  $f%d \n",i_while,f1,f2);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
												
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 }
											 //on the left side is number and on the right register  ex. 2.5<i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													f[f2]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													
													i_while++;
											
												
													fprintf(mips_text, "L%d: c.lt.s 	$f%d,  $f%d\n",i_while,f2,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													nd1->SymbolNode->convert_to_float=3;
											 
											 
											 
											 }
											 //on the left side is register  and on the right number   ex.j(float)<2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													f[f1]=1;
													
										
													i_while++;
											
													fprintf(mips_text, "L%d: c.lt.s 	%s,  $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											  //both are registers  j(float)<i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
											
													i_while++;
													
													fprintf(mips_text, "L%d: c.lt.s 	%s,  $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->convert_to_float=3;
											 
											 }
									
									break;
									
									case 4:// both are floats 
											
											//both are numbers  1.5<1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													f[f2]=1;
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.lt.s 	 $f%d , $f%d\n",i_while,f1,f2);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 
											 }
											 //on the left side is number and on the right register  ex. 2.5<j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
												
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.lt.s 	 $f%d , %s\n",i_while,f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											 //on the left side is register and on the right number  ex. j(float)<2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.lt.s 	%s , $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													
											 
											 }
											  //both are registers  j(float)<k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.lt.s 	 %s , %s\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
											 
											 }
											
									break;
								}
					
					break;
					
					case 3: //3 >
							
							
							switch(i)
								{
									case 1:// both are integers  
									 
									 //both are numbers  1>2
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_while++;
											fprintf(mips_text, "L%d: ble  $t%d, %s, exit%d \n\n",i_while,t1,nd3->SymbolNode->regist,i_while);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;
											
											
										 }
										 //on the left side is number and on the right register  ex. 2>c(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_while++;
											fprintf(mips_text, "L%d: ble  $t%d, %s, exit%d \n\n",i_while,t1,nd3->SymbolNode->regist,i_while);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;

										 }
										 //on the left side is register and on the right number  ex. c(int)>2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
											
											i_while++;
											fprintf(mips_text, "L%d: ble  %s, %s, exit%d \n\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_while);
										 
										 }
										  //both are registers  c(int)>d(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
											i_while++;
											fprintf(mips_text, "L%d: ble  %s, %s, exit%d \n\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_while);
										 
										 }
										break;
									
									case 2:// on the left side is integer and on the right float  ex.
									
										//both are numbers  1>1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_while++;
											fprintf(mips_text, "L%d:	 c.le.s  $f%d, $f%d \n\n",i_while,f1,f2);
											fprintf(mips_text, "bc1t   exit%d\n\n",i_while);	
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;	
											
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;	
											
										 }
										 //on the left side is number and on the right register  ex. 2>j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											i_while++;
											
										    fprintf(mips_text, "L%d:   c.le.s 	$f%d,  %s \n",i_while,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;											
										 
										 }
										 
										 //on the left side is register and on the right number  ex. i(int)>2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_while++;
											
										    fprintf(mips_text, "L%d:   c.le.s 	$f%d,   $f%d  \n",i_while,f1,f2);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
											
											
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;
											nd1->SymbolNode->convert_to_float=1;
											
										 }
										  //both are registers  c(int)>j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											f[f1]=1;
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
										    i_while++;
											
										    fprintf(mips_text, "L%d:   c.le.s 	$f%d,   %s \n",i_while,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
										
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->convert_to_float=1;
										 }
									
									break;
									
									case 3:// on the left side is float and on the right integer  ex.
										
											//both are numbers  1.5>1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													f[f2]=1;
													
													i_while++;
											
													fprintf(mips_text, "L%d:   c.le.s 	$f%d,  $f%d \n",i_while,f1,f2);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
												
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 }
											 //on the left side is number and on the right register  ex. 2.5>i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													f[f2]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													
													i_while++;
											
												
													fprintf(mips_text, "L%d: c.le.s 	$f%d,  $f%d\n",i_while,f2,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													nd1->SymbolNode->convert_to_float=3;
											 
											 
											 
											 }
											 //on the left side is register and on the right number  ex. j(float)>2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													f[f1]=1;
													
										
													i_while++;
											
													fprintf(mips_text, "L%d: c.le.s 	%s,  $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											  //both are registers  j(float)>i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
											
													i_while++;
													
													fprintf(mips_text, "L%d: c.le.s 	%s,  $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->convert_to_float=3;
											 
											 }
									
									break;
									
									case 4:// both are floats 
											
											//both are numbers  1.5>1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													f[f2]=1;
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.le.s 	 $f%d , $f%d\n",i_while,f1,f2);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 
											 }
											 //on the left side is number and on the right register  ex. 2.5>j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
												
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.le.s 	 $f%d , %s\n",i_while,f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											 //on the left side is register and on the right numbers   ex. j(float)>2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.le.s 	%s , $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													
											 
											 }
											  //both are registers  j(float)>k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.le.s 	 %s , %s\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
											 
											 }
											
									break;
								}
								
					break;
					
					case 4: //4 <= 
								
								switch(i)
								{
									case 1:// both are integers 
									 
									 //both are numbers  1<= 2
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_while++;
											fprintf(mips_text, "L%d: bgt  $t%d, %s, exit%d \n\n",i_while,t1,nd3->SymbolNode->regist,i_while);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;
											
											
										 }
										 //on the left side is number and on the right register  ex. 2<= c(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_while++;
											fprintf(mips_text, "L%d: bgt  $t%d, %s, exit%d \n\n",i_while,t1,nd3->SymbolNode->regist,i_while);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;

										 }
										 //on the left side is register and on the right number  ex. c(int)<= 2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
											
											i_while++;
											fprintf(mips_text, "L%d: bgt  %s, %s, exit%d \n\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_while);
										 
										 }
										  //both are registers 
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
											i_while++;
											fprintf(mips_text, "L%d: bgt  %s, %s, exit%d \n\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_while);
										 
										 }
										break;
									
									case 2:// on the left side is integer and on the right float  ex.
									
										//both are numbers  1<= 1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_while++;
											fprintf(mips_text, "L%d:	 c.le.s  $f%d, $f%d \n\n",i_while,f1,f2);
											fprintf(mips_text, "bc1f   exit%d\n\n",i_while);	
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;	
											
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;	
											
										 }
										 //on the left side is number and on the right register  ex. 2<= j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											i_while++;
											
										    fprintf(mips_text, "L%d:   c.le.s 	$f%d,  %s \n",i_while,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;											
										 
										 }
										 
										 //on the left side is register and on the right number  ex. i(int)<= 2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_while++;
											
										    fprintf(mips_text, "L%d:   c.le.s 	$f%d,   $f%d  \n",i_while,f1,f2);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
											
											
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;
											nd1->SymbolNode->convert_to_float=1;
											
										 }
										  //both are registers  c(int)<= j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											f[f1]=1;
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
										    i_while++;
											
										    fprintf(mips_text, "L%d:   c.le.s 	$f%d,   %s \n",i_while,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
										
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->convert_to_float=1;
										 }
									
									break;
									
									case 3:// on the left side is float and on the right integer  ex.
										
											//both are numbers  1.5<= 1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													f[f2]=1;
													
													i_while++;
											
													fprintf(mips_text, "L%d:   c.le.s 	$f%d,  $f%d \n",i_while,f1,f2);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
												
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 }
											 //on the left side is number and on the right register  ex. 2.5<= i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													f[f2]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													
													i_while++;
											
												
													fprintf(mips_text, "L%d: c.le.s 	$f%d,  $f%d\n",i_while,f2,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													nd1->SymbolNode->convert_to_float=3;
											 
											 
											 
											 }
											 //on the left side is register and on the right number  ex.h j(float)<= 2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													f[f1]=1;
													
										
													i_while++;
											
													fprintf(mips_text, "L%d: c.le.s 	%s,  $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											  //both are registers  j(float)<= i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
											
													i_while++;
													
													fprintf(mips_text, "L%d: c.le.s 	%s,  $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->convert_to_float=3;
											 
											 }
									
									break;
									
									case 4:// both are floats 
											
											//both are numbers  ex. 1.5<= 1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													f[f2]=1;
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.le.s 	 $f%d , $f%d\n",i_while,f1,f2);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 
											 }
											 //on the left side is number and on the right register  ex. 2.5<= j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
												
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.le.s 	 $f%d , %s\n",i_while,f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											 //on the left side is register and on the right number  ex.j(float)<= 2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.le.s 	%s , $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													
											 
											 }
											  //both are registers  j(float)<= k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.le.s 	 %s , %s\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_while);
											 
											 }
											
									break;
								}
								
					
					break;
						
					case 5: //5  >= 
					
								switch(i)
								{
									case 1:// both are integers 
									 
									 //both are numbers  1>= 2
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_while++;
											fprintf(mips_text, "L%d: blt  $t%d, %s, exit%d \n\n",i_while,t1,nd3->SymbolNode->regist,i_while);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;
											
											
										 }
										 //on the left side is number and on the right register  ex. psh 2>=  c(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_while++;
											fprintf(mips_text, "L%d: blt  $t%d, %s, exit%d \n\n",i_while,t1,nd3->SymbolNode->regist,i_while);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;

										 }
										 //on the left side is register and on the right number  ex. c(int)>=  2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
											
											i_while++;
											fprintf(mips_text, "L%d: blt  %s, %s, exit%d \n\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_while);
										 
										 }
										  //both are registers c(int)>=  d(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
											i_while++;
											fprintf(mips_text, "L%d: blt  %s, %s, exit%d \n\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_while);
										 
										 }
										break;
									
									case 2://on the left side is integer and on the right float  ex.
									
										//both are numbers  1>= 1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_while++;
											fprintf(mips_text, "L%d:	 c.lt.s  $f%d, $f%d \n\n",i_while,f1,f2);
											fprintf(mips_text, "bc1t   exit%d\n\n",i_while);	
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;	
											
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;	
											
										 }
										 //on the left side is number and on the right register  ex. psh 2>= j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											i_while++;
											
										    fprintf(mips_text, "L%d:   c.lt.s 	$f%d,  %s \n",i_while,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;											
										 
										 }
										 
										 //on the left side is register and on the right number  ex. i(int)>= 2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_while++;
											
										    fprintf(mips_text, "L%d:   c.lt.s 	$f%d,   $f%d  \n",i_while,f1,f2);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
											
											
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;
											nd1->SymbolNode->convert_to_float=1;
											
										 }
										  //both are registers  c(int)>= j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											f[f1]=1;
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
										    i_while++;
											
										    fprintf(mips_text, "L%d:   c.lt.s 	$f%d,   %s \n",i_while,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
										
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->convert_to_float=1;
										 }
									
									break;
									
									case 3:// on the left side is float and on the right integr  
										
											//both are numbers  1.5>= 1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													f[f2]=1;
													
													i_while++;
											
													fprintf(mips_text, "L%d:   c.lt.s 	$f%d,  $f%d \n",i_while,f1,f2);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
												
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 }
											 //on the left side is number and on the right register  ex. 2.5>= i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													f[f2]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													
													i_while++;
											
												
													fprintf(mips_text, "L%d: c.lt.s 	$f%d,  $f%d\n",i_while,f2,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													nd1->SymbolNode->convert_to_float=3;
											 
											 
											 
											 }
											 //on the left side is register and on the right numbers   ex. j(float)>= 2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													f[f1]=1;
													
										
													i_while++;
											
													fprintf(mips_text, "L%d: c.lt.s 	%s,  $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											  //both are registers  j(float)>= i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
											
													i_while++;
													
													fprintf(mips_text, "L%d: c.lt.s 	%s,  $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t  exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->convert_to_float=3;
											 
											 }
									
									break;
									
									case 4:// both are floats 
											
											//both are numbers  1.5>= 1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													f[f2]=1;
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.lt.s 	 $f%d , $f%d\n",i_while,f1,f2);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 
											 }
											 //on the left side is number and on the right register  ex. 2.5>= j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
												
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.lt.s 	 $f%d , %s\n",i_while,f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											 //on the left side is register and on the right number  ex. j(float)>= 2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.lt.s 	%s , $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													
											 
											 }
											  //both are registers  j(float)>= k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.lt.s 	 %s , %s\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
											 
											 }
											
									break;
								}
								
					break;
					
					case 6: //6  !=
					
								switch(i)
								{
									case 1:// both are integers
									 
									 //ex. 1 != 2
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_while++;
											fprintf(mips_text, "L%d: beq  $t%d, %s, exit%d \n\n",i_while,t1,nd3->SymbolNode->regist,i_while);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;
											
											
										 }
										 //ex. 2 !=  c(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_while++;
											fprintf(mips_text, "L%d: beq  $t%d, %s, exit%d \n\n",i_while,t1,nd3->SymbolNode->regist,i_while);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;

										 }
										 //ex. !=  2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
											
											i_while++;
											fprintf(mips_text, "L%d: beq  %s, %s, exit%d \n\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_while);
										 
										 }
										  //ex. c(int) !=  d(int) both registers 
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
											i_while++;
											fprintf(mips_text, "L%d: beq  %s, %s, exit%d \n\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_while);
										 
										 }
										break;
									
									case 2:// first is integer and the second is float 
									
										//ex. 1!= 1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_while++;
											fprintf(mips_text, "L%d:	 c.eq.s  $f%d, $f%d \n\n",i_while,f1,f2);
											fprintf(mips_text, "bc1t   exit%d\n\n",i_while);	
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;	
											
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;	
											
										 }
										 //ex. 2!= j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											i_while++;
											
										    fprintf(mips_text, "L%d:   c.eq.s 	$f%d,  %s \n",i_while,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;											
										 
										 }
										 
										 //ex. i(int)!= 2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_while++;
											
										    fprintf(mips_text, "L%d:   c.eq.s 	$f%d,   $f%d  \n",i_while,f1,f2);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
											
											
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;
											nd1->SymbolNode->convert_to_float=1;
											
										 }
										  //both registers ex. c(int)!= j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											f[f1]=1;
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
										    i_while++;
											
										    fprintf(mips_text, "L%d:   c.eq.s 	$f%d,   %s \n",i_while,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
										
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->convert_to_float=1;
										 }
									
									break;
									
									case 3:// first is float and the second integer
										
											//ex. 1.5!= 1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													f[f2]=1;
													
													i_while++;
											
													fprintf(mips_text, "L%d:   c.eq.s 	$f%d,  $f%d \n",i_while,f1,f2);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
												
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 }
											 //ex. 2.5!= i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													f[f2]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													
													i_while++;
											
												
													fprintf(mips_text, "L%d: 	c.eq.s 	$f%d,  $f%d\n",i_while,f2,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													nd1->SymbolNode->convert_to_float=3;
											 
											 
											 
											 }
											 //ex. j(float)!= 2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													f[f1]=1;
													
										
													i_while++;
											
													fprintf(mips_text, "L%d: c.eq.s 	%s,  $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											  //ex. both registers  j(float)!= i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
											
													i_while++;
													
													fprintf(mips_text, "L%d: c.eq.s 	%s,  $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t  exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->convert_to_float=3;
											 
											 }
									
									break;
									
									case 4:// both floats 
											
											//both numbers  1.5!= 1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													f[f2]=1;
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.eq.s 	 $f%d , $f%d\n",i_while,f1,f2);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 
											 }
											 //ex. 2.5!= j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
												
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.eq.s 	 $f%d , %s\n",i_while,f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											 //ex. j(float)!= 2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.eq.s 	%s , $f%d\n",i_while,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													
											 
											 }
											  //both are registers ex. j(float)!= k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													
													i_while++;
													
													fprintf(mips_text, "L%d: c.eq.s 	 %s , %s\n",i_while,nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_while);
											 
											 }
											
									break;
								}
						
				}
				
				
}
void for_generation(AstNode* nd1,AstNode* nd2,AstNode* nd3,int i){
		
				
				switch(nd2->oper)
				{				
				
					case 1: //1 ==
								
								switch(i)
								{
									case 1:// both are integers 
									 
									 //both numbers  1==2
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_for++;
											fprintf(mips_text, "L%d: bne  $t%d, %s, exit%d \n\n",i_for,t1,nd3->SymbolNode->regist,i_for);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;
										 }
										 //ex. 2==c(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_for++;
											fprintf(mips_text, "L%d: bne  $t%d, %s, exit%d \n\n",i_for,t1,nd3->SymbolNode->regist,i_for);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;

										 }
										 //ex.c(int)==2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
											
											i_for++;
											fprintf(mips_text, "L%d: bne  %s, %s, exit%d \n\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_for);
										 
										 }
										  //both registers  c(int)==d(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
											i_for++;
											fprintf(mips_text, "L%d: bne  %s, %s, exit%d \n\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_for);
										 
										 }
										break;
									
									case 2:// first is integer and the second float 
									
										//both are numbers  1==1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_for++;
											fprintf(mips_text, "L%d:	 c.eq.s  $f%d, $f%d \n\n",i_for,f1,f2);
											fprintf(mips_text, "bc1f   exit%d\n\n",i_for);	
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;	
											
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;	
											
										 }
										 //ex. 2==j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											i_for++;
											
										    fprintf(mips_text, "L%d:   c.eq.s 	$f%d,  %s \n",i_for,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;											
										 
										 }
										 
										 //ex. i(int)==2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_for++;
											
										    fprintf(mips_text, "L%d:   c.eq.s 	$f%d,   $f%d  \n",i_for,f1,f2);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
											
											
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;
											nd1->SymbolNode->convert_to_float=1;
											
										 }
										  //both are registers  c(int)==j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											f[f1]=1;
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
										    i_for++;
											
										    fprintf(mips_text, "L%d:   c.eq.s 	$f%d,   %s \n",i_for,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
										
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->convert_to_float=1;
										 }
									
									break;
									
									case 3:// firs is float and the second is integer
										
											//both are numbers  1.5==1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													f[f2]=1;
													
													i_for++;
											
													fprintf(mips_text, "L%d:   c.eq.s 	$f%d,  $f%d \n",i_for,f1,f2);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
												
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 }
											 //ex. 2.5==i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													f[f2]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													
													i_for++;
											
												
													fprintf(mips_text, "L%d: c.eq.s 	$f%d,  $f%d\n",i_for,f2,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													nd1->SymbolNode->convert_to_float=3;
											 
											 
											 
											 }
											 //ex. j(float)==2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													f[f1]=1;
													
										
													i_for++;
											
													fprintf(mips_text, "L%d: c.eq.s 	%s,  $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											  //both registers  j(float)==i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
											
													i_for++;
													
													fprintf(mips_text, "L%d: c.eq.s 	%s,  $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->convert_to_float=3;
											 
											 }
									
									break;
									
									case 4:// both are floats 
											
											//both are numebrs  1.5==1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													f[f2]=1;
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.eq.s 	 $f%d , $f%d\n",i_for,f1,f2);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 
											 }
											 //ex. 2.5==j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
												
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.eq.s 	 $f%d , %s\n",i_for,f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											 //ex. j(float)==2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.eq.s 	%s , $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													
											 
											 }
											  //both are registers   j(float)==k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.eq.s 	 %s , %s\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
											 
											 }
											
									break;
								}
						
					break;
						
					case 2: //2 <
					
								switch(i)
								{
									case 1:// both are integers 
									 
									 //both are numbers  1<2
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_for++;
											fprintf(mips_text, "L%d: bge  $t%d, %s, exit%d \n\n",i_for,t1,nd3->SymbolNode->regist,i_for);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;
										 }
										 //ex. 2<c(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_for++;
											fprintf(mips_text, "L%d: bge  $t%d, %s, exit%d \n\n",i_for,t1,nd3->SymbolNode->regist,i_for);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;

										 }
										 //ex. c(int)<2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
											
											i_for++;
											fprintf(mips_text, "L%d: bge  %s, %s, exit%d \n\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_for);
										 
										 }
										  //ex. c(int)<d(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
											i_for++;
											fprintf(mips_text, "L%d: bge  %s, %s, exit%d \n\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_for);
										 
										 }
										break;
									
									case 2:// integer < float 
									
										//ex. 1<1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_for++;
											fprintf(mips_text, "L%d:	 c.lt.s  $f%d, $f%d \n\n",i_for,f1,f2);
											fprintf(mips_text, "bc1f   exit%d\n\n",i_for);	
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;	
											
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;	
											
										 }
										 //ex.2<j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											i_for++;
											
										    fprintf(mips_text, "L%d:   c.lt.s 	$f%d,  %s \n",i_for,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;											
										 
										 }
										 
										 // i(int)<2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_for++;
											
										    fprintf(mips_text, "L%d:   c.lt.s 	$f%d,   $f%d  \n",i_for,f1,f2);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
											
											
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;
											nd1->SymbolNode->convert_to_float=1;
											
										 }
										  //c(int)<j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											f[f1]=1;
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
										    i_for++;
											
										    fprintf(mips_text, "L%d:   c.lt.s 	$f%d,   %s \n",i_for,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
										
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->convert_to_float=1;
										 }
									
									break;
									
									case 3://  float <integer
										
											// 1.5<1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													f[f2]=1;
													
													i_for++;
											
													fprintf(mips_text, "L%d:   c.lt.s 	$f%d,  $f%d \n",i_for,f1,f2);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
												
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 }
											 // 2.5<i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													f[f2]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													
													i_for++;
											
												
													fprintf(mips_text, "L%d: c.lt.s 	$f%d,  $f%d\n",i_for,f2,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													nd1->SymbolNode->convert_to_float=3;
											 
											 
											 
											 }
											 // j(float)<2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													f[f1]=1;
													
										
													i_for++;
											
													fprintf(mips_text, "L%d: c.lt.s 	%s,  $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											  // j(float)<i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
											
													i_for++;
													
													fprintf(mips_text, "L%d: c.lt.s 	%s,  $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->convert_to_float=3;
											 
											 }
									
									break;
									
									case 4:// float<float
											
											//1.5<1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													f[f2]=1;
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.lt.s 	 $f%d , $f%d\n",i_for,f1,f2);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 
											 }
											 // 2.5<j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
												
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.lt.s 	 $f%d , %s\n",i_for,f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											 // j(float)<2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.lt.s 	%s , $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													
											 
											 }
											  // j(float)<k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.lt.s 	 %s , %s\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
											 
											 }
											
									break;
								}
					
					break;
					
					case 3: //3 >
							
							
							switch(i)
								{
									case 1:// both integers 
									 
									 // 1>2
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_for++;
											fprintf(mips_text, "L%d: ble  $t%d, %s, exit%d \n\n",i_for,t1,nd3->SymbolNode->regist,i_for);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;
											
											
										 }
										 // 2>c(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_for++;
											fprintf(mips_text, "L%d: ble  $t%d, %s, exit%d \n\n",i_for,t1,nd3->SymbolNode->regist,i_for);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;

										 }
										 // c(int)>2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
											
											i_for++;
											fprintf(mips_text, "L%d: ble  %s, %s, exit%d \n\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_for);
										 
										 }
										  // c(int)>d(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
											i_for++;
											fprintf(mips_text, "L%d: ble  %s, %s, exit%d \n\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_for);
										 
										 }
										break;
									
									case 2:// integer> float 
									
										// 1>1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_for++;
											fprintf(mips_text, "L%d:	 c.le.s  $f%d, $f%d \n\n",i_for,f1,f2);
											fprintf(mips_text, "bc1t   exit%d\n\n",i_for);	
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;	
											
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;	
											
										 }
										 // 2>j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											i_for++;
											
										    fprintf(mips_text, "L%d:   c.le.s 	$f%d,  %s \n",i_for,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;											
										 
										 }
										 
										 // i(int)>2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_for++;
											
										    fprintf(mips_text, "L%d:   c.le.s 	$f%d,   $f%d  \n",i_for,f1,f2);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
											
											
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;
											nd1->SymbolNode->convert_to_float=1;
											
										 }
										  // c(int)>j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											f[f1]=1;
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
										    i_for++;
											
										    fprintf(mips_text, "L%d:   c.le.s 	$f%d,   %s \n",i_for,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
										
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->convert_to_float=1;
										 }
									
									break;
									
									case 3:// float >integer
										
											//1.5>1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													f[f2]=1;
													
													i_for++;
											
													fprintf(mips_text, "L%d:   c.le.s 	$f%d,  $f%d \n",i_for,f1,f2);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
												
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 }
											 //2.5>i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													f[f2]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													
													i_for++;
											
												
													fprintf(mips_text, "L%d: c.le.s 	$f%d,  $f%d\n",i_for,f2,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													nd1->SymbolNode->convert_to_float=3;
											 
											 
											 
											 }
											 //j(float)>2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													f[f1]=1;
													
										
													i_for++;
											
													fprintf(mips_text, "L%d: c.le.s 	%s,  $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											  // j(float)>i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
											
													i_for++;
													
													fprintf(mips_text, "L%d: c.le.s 	%s,  $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->convert_to_float=3;
											 
											 }
									
									break;
									
									case 4:// both floats
											
											// 1.5>1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													f[f2]=1;
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.le.s 	 $f%d , $f%d\n",i_for,f1,f2);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 
											 }
											 // 2.5>j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
												
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.le.s 	 $f%d , %s\n",i_for,f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											 // j(float)>2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.le.s 	%s , $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													
											 
											 }
											  // j(float)>k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.le.s 	 %s , %s\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
											 
											 }
											
									break;
								}
								
					break;
					
					case 4: //4 <= 
								
								switch(i)
								{
									case 1:// both integers  
									 
									 // 1<= 2
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_for++;
											fprintf(mips_text, "L%d: bgt  $t%d, %s, exit%d \n\n",i_for,t1,nd3->SymbolNode->regist,i_for);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;
											
											
										 }
										 // psh 2<= c(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_for++;
											fprintf(mips_text, "L%d: bgt  $t%d, %s, exit%d \n\n",i_for,t1,nd3->SymbolNode->regist,i_for);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;

										 }
										 // c(int)<= 2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
											
											i_for++;
											fprintf(mips_text, "L%d: bgt  %s, %s, exit%d \n\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_for);
										 
										 }
										  // c(int)<= d(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
											i_for++;
											fprintf(mips_text, "L%d: bgt  %s, %s, exit%d \n\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_for);
										 
										 }
										break;
									
									case 2:// integer <= float 
									
										// 1<= 1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_for++;
											fprintf(mips_text, "L%d:	 c.le.s  $f%d, $f%d \n\n",i_for,f1,f2);
											fprintf(mips_text, "bc1f   exit%d\n\n",i_for);	
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;	
											
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;	
											
										 }
										 // 2<= j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											i_for++;
											
										    fprintf(mips_text, "L%d:   c.le.s 	$f%d,  %s \n",i_for,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;											
										 
										 }
										 
										 // i(int)<= 2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_for++;
											
										    fprintf(mips_text, "L%d:   c.le.s 	$f%d,   $f%d  \n",i_for,f1,f2);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
											
											
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;
											nd1->SymbolNode->convert_to_float=1;
											
										 }
										  // c(int)<= j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											f[f1]=1;
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
										    i_for++;
											
										    fprintf(mips_text, "L%d:   c.le.s 	$f%d,   %s \n",i_for,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
										
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->convert_to_float=1;
										 }
									
									break;
									
									case 3://float <= integer
										
											//rasti  kur psh jane te dyja numra psh 1.5<= 1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													f[f2]=1;
													
													i_for++;
											
													fprintf(mips_text, "L%d:   c.le.s 	$f%d,  $f%d \n",i_for,f1,f2);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
												
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 }
											 //2.5<= i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													f[f2]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													
													i_for++;
											
												
													fprintf(mips_text, "L%d: c.le.s 	$f%d,  $f%d\n",i_for,f2,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													nd1->SymbolNode->convert_to_float=3;
											 
											 
											 
											 }
											 //j(float)<= 2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													f[f1]=1;
													
										
													i_for++;
											
													fprintf(mips_text, "L%d: c.le.s 	%s,  $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											  //j(float)<= i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
											
													i_for++;
													
													fprintf(mips_text, "L%d: c.le.s 	%s,  $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->convert_to_float=3;
											 
											 }
									
									break;
									
									case 4://  float<=float
											
											//1.5<= 1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													f[f2]=1;
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.le.s 	 $f%d , $f%d\n",i_for,f1,f2);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 
											 }
											 // 2.5<= j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
												
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.le.s 	 $f%d , %s\n",i_for,f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											 // j(float)<= 2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.le.s 	%s , $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													
											 
											 }
											  // j(float)<= k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.le.s 	 %s , %s\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   exit%d\n\n",i_for);
											 
											 }
											
									break;
								}
								
					
					break;
						
					case 5: //5  >= 
					
								switch(i)
								{
									case 1:// both are  integer 
									 
									 //1>= 2
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_for++;
											fprintf(mips_text, "L%d: blt  $t%d, %s, exit%d \n\n",i_for,t1,nd3->SymbolNode->regist,i_for);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;
											
											
										 }
										 // 2>=  c(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_for++;
											fprintf(mips_text, "L%d: blt  $t%d, %s, exit%d \n\n",i_for,t1,nd3->SymbolNode->regist,i_for);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;

										 }
										 // c(int)>=  2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
											
											i_for++;
											fprintf(mips_text, "L%d: blt  %s, %s, exit%d \n\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_for);
										 
										 }
										  // c(int)>=  d(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
											i_for++;
											fprintf(mips_text, "L%d: blt  %s, %s, exit%d \n\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_for);
										 
										 }
										break;
									
									case 2://  integer >= float 
									
										// 1>= 1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_for++;
											fprintf(mips_text, "L%d:	 c.lt.s  $f%d, $f%d \n\n",i_for,f1,f2);
											fprintf(mips_text, "bc1t   exit%d\n\n",i_for);	
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;	
											
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;	
											
										 }
										 // 2>= j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											i_for++;
											
										    fprintf(mips_text, "L%d:   c.lt.s 	$f%d,  %s \n",i_for,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;											
										 
										 }
										 
										 // i(int)>= 2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_for++;
											
										    fprintf(mips_text, "L%d:   c.lt.s 	$f%d,   $f%d  \n",i_for,f1,f2);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
											
											
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;
											nd1->SymbolNode->convert_to_float=1;
											
										 }
										  // c(int)>= j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											f[f1]=1;
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
										    i_for++;
											
										    fprintf(mips_text, "L%d:   c.lt.s 	$f%d,   %s \n",i_for,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
										
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->convert_to_float=1;
										 }
									
									break;
									
									case 3:// float >= integer
										
											// 1.5>= 1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													f[f2]=1;
													
													i_for++;
											
													fprintf(mips_text, "L%d:   c.lt.s 	$f%d,  $f%d \n",i_for,f1,f2);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
												
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 }
											 // 2.5>= i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													f[f2]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													
													i_for++;
											
												
													fprintf(mips_text, "L%d: c.lt.s 	$f%d,  $f%d\n",i_for,f2,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													nd1->SymbolNode->convert_to_float=3;
											 
											 
											 
											 }
											 // j(float)>= 2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													f[f1]=1;
													
										
													i_for++;
											
													fprintf(mips_text, "L%d: c.lt.s 	%s,  $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											  // j(float)>= i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
											
													i_for++;
													
													fprintf(mips_text, "L%d: c.lt.s 	%s,  $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t  exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->convert_to_float=3;
											 
											 }
									
									break;
									
									case 4:// both  floats
											
											// 1.5>= 1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													f[f2]=1;
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.lt.s 	 $f%d , $f%d\n",i_for,f1,f2);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 
											 }
											 // 2.5>= j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
												
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.lt.s 	 $f%d , %s\n",i_for,f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											 // j(float)>= 2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.lt.s 	%s , $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													
											 
											 }
											  // j(float)>= k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.lt.s 	 %s , %s\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
											 
											 }
											
									break;
								}
								
					break;
					
					case 6: //6  !=
					
								switch(i)
								{
									case 1://both  integers
									 
									 //rasti  kur psh jane te dyja numra psh 1 != 2
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_for++;
											fprintf(mips_text, "L%d: beq  $t%d, %s, exit%d \n\n",i_for,t1,nd3->SymbolNode->regist,i_for);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;
											
											
										 }
										 // 2 !=  c(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
											
											int t1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
											
											}
											t[t1]=1;
											fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
											i_for++;
											fprintf(mips_text, "L%d: beq  $t%d, %s, exit%d \n\n",i_for,t1,nd3->SymbolNode->regist,i_for);
											nd1->SymbolNode->release_register='t';
											nd1->SymbolNode->release_nr_register=t1;

										 }
										 // c(int) !=  2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
											
											i_for++;
											fprintf(mips_text, "L%d: beq  %s, %s, exit%d \n\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_for);
										 
										 }
										  //c(int) !=  d(int)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
											i_for++;
											fprintf(mips_text, "L%d: beq  %s, %s, exit%d \n\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_for);
										 
										 }
										break;
									
									case 2://  integer != float 
									
										// 1!= 1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_for++;
											fprintf(mips_text, "L%d:	 c.eq.s  $f%d, $f%d \n\n",i_for,f1,f2);
											fprintf(mips_text, "bc1t   exit%d\n\n",i_for);	
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;	
											
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;	
											
										 }
										 // 2!= j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											i_for++;
											
										    fprintf(mips_text, "L%d:   c.eq.s 	$f%d,  %s \n",i_for,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;											
										 
										 }
										 
										 // i(int)!= 2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
											f[f2]=1;
											
											i_for++;
											
										    fprintf(mips_text, "L%d:   c.eq.s 	$f%d,   $f%d  \n",i_for,f1,f2);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
											
											
											
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->release_register2='f';
											nd1->SymbolNode->release_nr_register2=f2;
											nd1->SymbolNode->convert_to_float=1;
											
										 }
										  // c(int)!= j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											f[f1]=1;
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
										    i_for++;
											
										    fprintf(mips_text, "L%d:   c.eq.s 	$f%d,   %s \n",i_for,f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
										
											nd1->SymbolNode->release_register='f';
											nd1->SymbolNode->release_nr_register=f1;
											nd1->SymbolNode->convert_to_float=1;
										 }
									
									break;
									
									case 3:// float != integer
										
											// 1.5!= 1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													f[f2]=1;
													
													i_for++;
											
													fprintf(mips_text, "L%d:   c.eq.s 	$f%d,  $f%d \n",i_for,f1,f2);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
												
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 }
											 // 2.5!= i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													f[f2]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													
													i_for++;
											
												
													fprintf(mips_text, "L%d: 	c.eq.s 	$f%d,  $f%d\n",i_for,f2,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													nd1->SymbolNode->convert_to_float=3;
											 
											 
											 
											 }
											 // j(float)!= 2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													f[f1]=1;
													
										
													i_for++;
											
													fprintf(mips_text, "L%d: c.eq.s 	%s,  $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
													
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											  // j(float)!= i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
											
													i_for++;
													
													fprintf(mips_text, "L%d: c.eq.s 	%s,  $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t  exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->convert_to_float=3;
											 
											 }
									
									break;
									
									case 4:// both floats
											
											//rasti  kur psh jane te dyja numra psh 1.5!= 1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													f[f2]=1;
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.eq.s 	 $f%d , $f%d\n",i_for,f1,f2);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													nd1->SymbolNode->release_register2='f';
													nd1->SymbolNode->release_nr_register2=f2;
													
											 
											 }
											 //2.5!= j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
												
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.eq.s 	 $f%d , %s\n",i_for,f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
											 
											 
											 }
											 // j(float)!= 2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													f[f1]=1;
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.eq.s 	%s , $f%d\n",i_for,nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
													
													nd1->SymbolNode->release_register='f';
													nd1->SymbolNode->release_nr_register=f1;
													
											 
											 }
											  // j(float)!= k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													
													i_for++;
													
													fprintf(mips_text, "L%d: c.eq.s 	 %s , %s\n",i_for,nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   exit%d\n\n",i_for);
											 
											 }
											
									break;
								}
						
				}
			
		
}
void if_generation(AstNode* nd1,AstNode* nd2,AstNode* nd3 ,int i ){

	switch(nd2->oper)
				{
					
					case 1: //1 ==
		
					
						switch(i)
								{
									case 1:// both integers
									 
									 // 1==1
									 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
										
										int t1;
										for(int i=0;i<10;i++){
											if(t[i]==0){
												t1=i;
												break;
											}
										
										}
										fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
										i_if++;
										fprintf(mips_text, "bne $t%d, %s, else%d\n\nthen%d:\n",t1,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									 // 2==c(int)
									 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
										
										int t1;
										for(int i=0;i<10;i++){
											if(t[i]==0){
												t1=i;
												break;
											}
										
										}
										fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
										i_if++;
									 	fprintf(mips_text, "bne  $t%d, %s, else%d\n\nthen%d:\n",t1,nd3->SymbolNode->regist,i_if,i_if);

									 }
									 // c(int)==2
									else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
										
										i_if++;
										fprintf(mips_text, "bne  %s, %s, else%d\n\nthen%d:\n",nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									  // c(int)==d(int)
									 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
										i_if++;
										fprintf(mips_text, "bne  %s, %s, else%d\n\nthen%d:\n",nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									break;
									
									case 2://  integer == float 
									
										// 1==1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											i_if++;
										    fprintf(mips_text, "c.eq.s 	$f%d,  $f%d \n",f1,f2);	
											fprintf(mips_text, "bc1f   else%d\n\n",i_if);	
											
											f[f1]=0;
											
										 }
										 // 2==j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											i_if++;
										    fprintf(mips_text, "c.eq.s 	$f%d,  %s \n",f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1f   else%d\n\n",i_if);	
										 
										 }
										 // i(int)==2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											i_if++;
										    fprintf(mips_text, "c.eq.s 	$f%d,  $f%d \n",f1,f2);	
											fprintf(mips_text, "bc1f   else%d\n\n",i_if);
											f[f1]=0;
											
											
										 }
										  // c(int)==j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											i_if++;
										    fprintf(mips_text, "c.eq.s 	$f%d,  %s \n",f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1f   else%d\n\n",i_if);
										 
										 
										 }
									
									break;
									
									case 3://  float == integer
										
											// 1.5==1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													i_if++;
													fprintf(mips_text, "c.eq.s 	$f%d,  $f%d \n",f1,f2);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);	
													
													f[f1]=0;
												
											 
											 
											 }
											 // 2.5==i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f2=z;
															break;
														}
												
													}
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													
													
													i_if++;
													fprintf(mips_text, "c.eq.s 	$f%d,  $f%d \n",f1,f2);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
													f[f1]=0;
											 
											 
											 
											 }
											 // j(float)==2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													i_if++;
													fprintf(mips_text, "c.eq.s  %s , $f%d\n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);	
											 
											 }
											  // j(float)==i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													i_if++;
													fprintf(mips_text, "c.eq.s  %s , $f%d  \n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
											 
											 }
									
									break;
									
									case 4:// both floats
											
											// 1.5==1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													i_if++;
													fprintf(mips_text, "c.eq.s  $f%d , $f%d  \n",f1,f2);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
													f[f1]=0;
											 
											 }
											 // 2.5==j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_if++;
													fprintf(mips_text, "c.eq.s  $f%d , %s  \n",f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
											 
											 
											 }
											 // j(float)==2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_if++;
													fprintf(mips_text, "c.eq.s 	 %s , $f%d \n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
													
											 
											 }
											  // j(float)==k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													i_if++;
													fprintf(mips_text, "c.eq.s  %s , %s  \n",nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
											 
											 }
											
									break;
								}
					
						break;
						
					case 2: //2 <
					
						switch(i)
								{
									case 1:// both integers
									 
									 // 1<2
									 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
										
										int t1;
										for(int i=0;i<10;i++){
											if(t[i]==0){
												t1=i;
												break;
											}
										
										}
										fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
										i_if++;
										fprintf(mips_text, "bge $t%d, %s, else%d\n\nthen%d:\n",t1,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									 // 2<c(int)
									 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
										
										int t1;
										for(int i=0;i<10;i++){
											if(t[i]==0){
												t1=i;
												break;
											}
										
										}
										fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
										i_if++;
									 	fprintf(mips_text, "bge  $t%d, %s, else%d\n\nthen%d:\n",t1,nd3->SymbolNode->regist,i_if,i_if);

									 }
									 // c(int)<2
									else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
										
										i_if++;
										fprintf(mips_text, "bge  %s, %s, else%d\n\nthen%d:\n",nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									  // c(int)<d(int)
									 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
										i_if++;
										fprintf(mips_text, "bge  %s, %s, else%d\n\nthen%d:\n",nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									break;
									
									case 2://  integer < float 
									
										// 1<1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											i_if++;
										    fprintf(mips_text, "c.lt.s 	$f%d,  $f%d \n",f1,f2);	
											fprintf(mips_text, "bc1f   else%d\n\n",i_if);	
											
											f[f1]=0;
											
										 }
										 // 2<j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											i_if++;
										    fprintf(mips_text, "c.lt.s 	$f%d,  %s \n",f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1f   else%d\n\n",i_if);	
										 
										 }
										 // i(int)<2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											i_if++;
										    fprintf(mips_text, "c.lt.s 	$f%d,  $f%d \n",f1,f2);	
											fprintf(mips_text, "bc1f   else%d\n\n",i_if);
											f[f1]=0;
											
											
										 }
										  // c(int)<j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											i_if++;
										    fprintf(mips_text, "c.lt.s 	$f%d,  %s \n",f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1f   else%d\n\n",i_if);
										 
										 
										 }
									
									break;
									
									case 3:// float < integer
										
											// 1.5<1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													i_if++;
													fprintf(mips_text, "c.lt.s 	$f%d,  $f%d \n",f1,f2);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);	
													
													f[f1]=0;
												
											 
											 
											 }
											 // 2.5<i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f2=z;
															break;
														}
												
													}
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													
													
													i_if++;
													fprintf(mips_text, "c.lt.s 	$f%d,  $f%d \n",f1,f2);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
													f[f1]=0;
											 
											 
											 
											 }
											 // j(float)<2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													i_if++;
													fprintf(mips_text, "c.lt.s  %s , $f%d\n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);	
											 
											 }
											  // j(float)<i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													i_if++;
													fprintf(mips_text, "c.lt.s  %s , $f%d  \n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
											 
											 }
									
									break;
									
									case 4:// both floats
											
											// 1.5<1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													i_if++;
													fprintf(mips_text, "c.lt.s  $f%d , $f%d  \n",f1,f2);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
													f[f1]=0;
											 
											 }
											 // 2.5<j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_if++;
													fprintf(mips_text, "c.lt.s  $f%d , %s  \n",f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
											 
											 
											 }
											 // j(float)<2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_if++;
													fprintf(mips_text, "c.lt.s 	 %s , $f%d \n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
													
											 
											 }
											  // j(float)<k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													i_if++;
													fprintf(mips_text, "c.lt.s  %s , %s  \n",nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
											 
											 }
											
									break;
								}
					
					
					
					break;
					
					case 3: //3 >
					   
							switch(i)
								{
									case 1:// both integers
									 
									 // 1<2
									 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
										
										int t1;
										for(int i=0;i<10;i++){
											if(t[i]==0){
												t1=i;
												break;
											}
										
										}
										fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
										i_if++;
										fprintf(mips_text, "ble $t%d, %s, else%d\n\nthen%d:\n",t1,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									 // 2<c(int)
									 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
										
										int t1;
										for(int i=0;i<10;i++){
											if(t[i]==0){
												t1=i;
												break;
											}
										
										}
										fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
										i_if++;
									 	fprintf(mips_text, "ble  $t%d, %s, else%d\n\nthen%d:\n",t1,nd3->SymbolNode->regist,i_if,i_if);

									 }
									 // c(int)<2
									else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
										
										i_if++;
										fprintf(mips_text, "ble  %s, %s, else%d\n\nthen%d:\n",nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									  // c(int)<d(int)
									 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
										i_if++;
										fprintf(mips_text, "ble  %s, %s, else%d\n\nthen%d:\n",nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									break;
									
									case 2://  integer < float 
									
										// 1<1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											i_if++;
										    fprintf(mips_text, "c.le.s 	$f%d,  $f%d \n",f1,f2);	
											fprintf(mips_text, "bc1t   else%d\n\n",i_if);	
											
											f[f1]=0;
											
										 }
										 // 2<j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											i_if++;
										    fprintf(mips_text, "c.le.s 	$f%d,  %s \n",f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1t   else%d\n\n",i_if);	
										 
										 }
										 // i(int)<2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											i_if++;
										    fprintf(mips_text, "c.le.s 	$f%d,  $f%d \n",f1,f2);	
											fprintf(mips_text, "bc1t   else%d\n\n",i_if);
											f[f1]=0;
											
											
										 }
										  // c(int)<j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											i_if++;
										    fprintf(mips_text, "c.le.s 	$f%d,  %s \n",f1,nd3->SymbolNode->regist);
											fprintf(mips_text, "bc1t   else%d\n\n",i_if);
										 
										 
										 }
									
									break;
									
									case 3://  float < integer
										
											//rasti  kur psh jane te dyja numra psh 1.5<1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													i_if++;
													fprintf(mips_text, "c.le.s 	$f%d,  $f%d \n",f1,f2);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);	
													
													f[f1]=0;
												
											 
											 
											 }
											 // 2.5<i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f2=z;
															break;
														}
												
													}
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													
													
													i_if++;
													fprintf(mips_text, "c.le.s 	$f%d,  $f%d \n",f1,f2);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
													f[f1]=0;
											 
											 
											 
											 }
											 // j(float)<2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													i_if++;
													fprintf(mips_text, "c.le.s  %s , $f%d\n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);	
											 
											 }
											  // j(float)<i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													i_if++;
													fprintf(mips_text, "c.le.s  %s , $f%d  \n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
											 
											 }
									
									break;
									
									case 4:// both floats
											
											// 1.5<1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													i_if++;
													fprintf(mips_text, "c.le.s  $f%d , $f%d  \n",f1,f2);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
													f[f1]=0;
											 
											 }
											 //2.5<j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_if++;
													fprintf(mips_text, "c.le.s  $f%d , %s  \n",f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
											 
											 
											 }
											 // j(float)<2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_if++;
													fprintf(mips_text, "c.le.s 	 %s , $f%d \n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
													
											 
											 }
											  // j(float)<k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													i_if++;
													fprintf(mips_text, "c.le.s  %s , %s  \n",nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
											 
											 }
											
									break;
								}
					   
					break;
					
					case 4: //4 <= 
							
							switch(i)
								{
									case 1:// both integer s
									 
									 // 1<=2
									 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
										
										int t1;
										for(int i=0;i<10;i++){
											if(t[i]==0){
												t1=i;
												break;
											}
										
										}
										fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
										i_if++;
										fprintf(mips_text, "bgt $t%d, %s, else%d\n\nthen%d:\n",t1,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									 // 2<=c(int)
									 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
										
										int t1;
										for(int i=0;i<10;i++){
											if(t[i]==0){
												t1=i;
												break;
											}
										
										}
										fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
										i_if++;
									 	fprintf(mips_text, "bgt  $t%d, %s, else%d\n\nthen%d:\n",t1,nd3->SymbolNode->regist,i_if,i_if);

									 }
									 //c(int)<=2
									else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
										
										i_if++;
										fprintf(mips_text, "bgt  %s, %s, else%d\n\nthen%d:\n",nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									  // c(int)<=d(int)
									 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
										i_if++;
										fprintf(mips_text, "bgt  %s, %s, else%d\n\nthen%d:\n",nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									break;
									
									case 2://  integer<= float 
									
										//1<=1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											i_if++;
										    fprintf(mips_text, "c.le.s 	$f%d,  $f%d \n",f1,f2);	
											fprintf(mips_text, "bc1f   else%d\n\n",i_if);	
											
											f[f1]=0;
											
										 }
										 // 2<=j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											i_if++;
										    fprintf(mips_text, "c.le.s 	$f%d,  %s \n",f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1f   else%d\n\n",i_if);	
										 
										 }
										 // i(int)<=2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											i_if++;
										    fprintf(mips_text, "c.le.s 	$f%d,  $f%d \n",f1,f2);	
											fprintf(mips_text, "bc1f   else%d\n\n",i_if);
											f[f1]=0;
											
											
										 }
										  // c(int)<=j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											i_if++;
										    fprintf(mips_text, "c.le.s 	$f%d,  %s \n",f1,nd3->SymbolNode->regist);
											fprintf(mips_text, "bc1f   else%d\n\n",i_if);
										 
										 
										 }
									
									break;
									
									case 3://  float <= integer
										
											// 1.5<=1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													i_if++;
													fprintf(mips_text, "c.le.s 	$f%d,  $f%d \n",f1,f2);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);	
													
													f[f1]=0;
												
											 
											 
											 }
											 // 2.5<=i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f2=z;
															break;
														}
												
													}
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													
													
													i_if++;
													fprintf(mips_text, "c.le.s 	$f%d,  $f%d \n",f1,f2);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
													f[f1]=0;
											 
											 
											 
											 }
											 // j(float)<=2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													i_if++;
													fprintf(mips_text, "c.le.s  %s , $f%d\n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);	
											 
											 }
											  // j(float)<=i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													i_if++;
													fprintf(mips_text, "c.le.s  %s , $f%d  \n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
											 
											 }
									
									break;
									
									case 4:// both floats
											
											// 1.5<=1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													i_if++;
													fprintf(mips_text, "c.le.s  $f%d , $f%d  \n",f1,f2);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
													f[f1]=0;
											 
											 }
											 // 2.5<=j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_if++;
													fprintf(mips_text, "c.le.s  $f%d , %s  \n",f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
											 
											 
											 }
											 //j(float)<=2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_if++;
													fprintf(mips_text, "c.le.s 	 %s , $f%d \n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
													
											 
											 }
											  // j(float)<=k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													i_if++;
													fprintf(mips_text, "c.le.s  %s , %s  \n",nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1f   else%d\n\n",i_if);
											 
											 }
											
									break;
								}
					
					break;
						
					case 5: //5 >= 
					
							switch(i)
								{
									case 1:// both integers 
									 
									 //1>=2
									 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
										
										int t1;
										for(int i=0;i<10;i++){
											if(t[i]==0){
												t1=i;
												break;
											}
										
										}
										fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
										i_if++;
										fprintf(mips_text, "blt $t%d, %s, else%d\n\nthen%d:\n",t1,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									 // 2>=c(int)
									 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
										
										int t1;
										for(int i=0;i<10;i++){
											if(t[i]==0){
												t1=i;
												break;
											}
										
										}
										fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
										i_if++;
									 	fprintf(mips_text, "blt  $t%d, %s, else%d\n\nthen%d:\n",t1,nd3->SymbolNode->regist,i_if,i_if);

									 }
									 //c(int)>=2
									else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
										
										i_if++;
										fprintf(mips_text, "blt  %s, %s, else%d\n\nthen%d:\n",nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									  //c(int)>=d(int)
									 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
										i_if++;
										fprintf(mips_text, "blt  %s, %s, else%d\n\nthen%d:\n",nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									break;
									
									case 2:// integer >= float 
									
										//1>=1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											i_if++;
										    fprintf(mips_text, "c.lt.s 	$f%d,  $f%d \n",f1,f2);	
											fprintf(mips_text, "bc1t   else%d\n\n",i_if);	
											
											f[f1]=0;
											
										 }
										 // 2>=j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											i_if++;
										    fprintf(mips_text, "c.lt.s 	$f%d,  %s \n",f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1t   else%d\n\n",i_if);	
										 
										 }
										 // i(int)>=2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											i_if++;
										    fprintf(mips_text, "c.lt.s 	$f%d,  $f%d \n",f1,f2);	
											fprintf(mips_text, "bc1t   else%d\n\n",i_if);
											f[f1]=0;
											
											
										 }
										  // c(int)>=j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											i_if++;
										    fprintf(mips_text, "c.lt.s 	$f%d,  %s \n",f1,nd3->SymbolNode->regist);
											fprintf(mips_text, "bc1t   else%d\n\n",i_if);
										 
										 
										 }
									
									break;
									
									case 3://  float >= integer
										
											// 1.5>=1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													i_if++;
													fprintf(mips_text, "c.lt.s 	$f%d,  $f%d \n",f1,f2);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);	
													
													f[f1]=0;
												
											 
											 
											 }
											 // 2.5>=i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f2=z;
															break;
														}
												
													}
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													
													
													i_if++;
													fprintf(mips_text, "c.lt.s 	$f%d,  $f%d \n",f1,f2);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
													f[f1]=0;
											 
											 
											 
											 }
											 // j(float)>=2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													i_if++;
													fprintf(mips_text, "c.lt.s  %s , $f%d\n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);	
											 
											 }
											  // j(float)>=i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													i_if++;
													fprintf(mips_text, "c.lt.s  %s , $f%d  \n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
											 
											 }
									
									break;
									
									case 4:// both floats
											
											// 1.5>=1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													i_if++;
													fprintf(mips_text, "c.lt.s  $f%d , $f%d  \n",f1,f2);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
													f[f1]=0;
											 
											 }
											 // 2.5>=j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_if++;
													fprintf(mips_text, "c.lt.s  $f%d , %s  \n",f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
											 
											 
											 }
											 // j(float)>=2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_if++;
													fprintf(mips_text, "c.lt.s 	 %s , $f%d \n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
													
											 
											 }
											  // j(float)>=k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													i_if++;
													fprintf(mips_text, "c.lt.s  %s , %s  \n",nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
											 
											 }
											
									break;
								}
					
					break;
					
					case 6: //6  !=
					
								switch(i)
								{
									case 1:// te dyja integer 
									 
									 // 1!=2
									 if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
										
										int t1;
										for(int i=0;i<10;i++){
											if(t[i]==0){
												t1=i;
												break;
											}
										
										}
										fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
										i_if++;
										fprintf(mips_text, "beq $t%d, %s, else%d\n\nthen%d:\n",t1,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									 // 2!=c(int)
									 else if(isNumeric(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
										
										int t1;
										for(int i=0;i<10;i++){
											if(t[i]==0){
												t1=i;
												break;
											}
										
										}
										fprintf(mips_text, "li 	$t%d , %d\n\n",t1,nd1->SymbolNode->timi);
										i_if++;
									 	fprintf(mips_text, "beq  $t%d, %s, else%d\n\nthen%d:\n",t1,nd3->SymbolNode->regist,i_if,i_if);

									 }
									 // c(int)!=2
									else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
										
										i_if++;
										fprintf(mips_text, "beq  %s, %s, else%d\n\nthen%d:\n",nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									  // c(int)!=d(int)
									 else if(isNumeric(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
										i_if++;
										fprintf(mips_text, "beq  %s, %s, else%d\n\nthen%d:\n",nd1->SymbolNode->regist,nd3->SymbolNode->regist,i_if,i_if);
									 
									 }
									break;
									
									case 2://  integer != float 
									
										// 1!=1.5
										 if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
											int t1,f1,f2;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											f[f1]=1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f2=z;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											i_if++;
										    fprintf(mips_text, "c.eq.s 	$f%d,  $f%d \n",f1,f2);	
											fprintf(mips_text, "bc1t   else%d\n\n",i_if);	
											
											f[f1]=0;
											
										 }
										 // 2!=j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
											int t1,f1;
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f1=j;
													break;
												}
										
											}
											
											fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd1->SymbolNode->timi);
											fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											
											i_if++;
										    fprintf(mips_text, "c.eq.s 	$f%d,  %s \n",f1,nd3->SymbolNode->regist);	
											fprintf(mips_text, "bc1t   else%d\n\n",i_if);	
										 
										 }
										 // i(int)!=2.2
										else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											
											int t1,f1,f2;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											f[f1]=1;
											
											for(int j=0;j<32;j++){
												if(f[j]==0){
													f2=j;
													break;
												}
										
											}
											for(int i=0;i<10;i++){
												if(t[i]==0){
													t1=i;
													break;
												}
										
											}
											
											float tmp=atof(nd3->SymbolNode->regist); 
											int encoding = *((int *)&tmp);
											fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
											fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
											i_if++;
										    fprintf(mips_text, "c.eq.s 	$f%d,  $f%d \n",f1,f2);	
											fprintf(mips_text, "bc1t   else%d\n\n",i_if);
											f[f1]=0;
											
											
										 }
										  //c(int)!=j(float)
										 else if(isNumeric(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){ 
											int f1;
											for(int z=0;z<32;z++){
												if(f[z]==0){
													f1=z;
													break;
												}
										
											}
											
											fprintf(mips_text,"mtc1    %s , $f%d \n",nd1->SymbolNode->regist,f1);
											fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
											i_if++;
										    fprintf(mips_text, "c.eq.s 	$f%d,  %s \n",f1,nd3->SymbolNode->regist);
											fprintf(mips_text, "bc1t   else%d\n\n",i_if);
										 
										 
										 }
									
									break;
									
									case 3://  float != integer
										
											// 1.5!=1
											 if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==1){
													int t1,f1,f2;
													
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													i_if++;
													fprintf(mips_text, "c.eq.s 	$f%d,  $f%d \n",f1,f2);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);	
													
													f[f1]=0;
												
											 
											 
											 }
											 // 2.5!=i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int t1,f1,f2;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f2=z;
															break;
														}
												
													}
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f2);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f2,f2);
													
													
													
													i_if++;
													fprintf(mips_text, "c.eq.s 	$f%d,  $f%d \n",f1,f2);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
													f[f1]=0;
											 
											 
											 
											 }
											 // j(float)!=2
											else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==1){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f1=j;
															break;
														}
												
													}
													
													fprintf(mips_text,"\nli    $t%d  , %d  \n",t1,nd3->SymbolNode->timi);
													fprintf(mips_text,"mtc1    $t%d  , $f%d \n",t1,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													
													i_if++;
													fprintf(mips_text, "c.eq.s  %s , $f%d\n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);	
											 
											 }
											  // j(float)!=i(int)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isNumeric(nd3->SymbolNode->regist)==0){
													
													int f1;
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													fprintf(mips_text,"mtc1    %s , $f%d \n",nd3->SymbolNode->regist,f1);
													fprintf(mips_text,"cvt.s.w $f%d  , $f%d  \n",f1,f1);
													i_if++;
													fprintf(mips_text, "c.eq.s  %s , $f%d  \n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
											 
											 }
									
									break;
									
									case 4:// both floats
											
											// 1.5!=1.3
											 if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==1){
												
													int t1,f1,f2;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													f[f1]=1;
													
													for(int j=0;j<32;j++){
														if(f[j]==0){
															f2=j;
															break;
														}
												
													}
													float tmp2=atof(nd3->SymbolNode->regist); 
													int encoding2 = *((int *)&tmp2);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding2);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f2);
													
													i_if++;
													fprintf(mips_text, "c.eq.s  $f%d , $f%d  \n",f1,f2);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
													f[f1]=0;
											 
											 }
											 // 2.5!=j(float)
											 else if(isFloat(nd1->SymbolNode->regist)==1 && isFloat(nd3->SymbolNode->regist)==0){
													
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd1->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_if++;
													fprintf(mips_text, "c.eq.s  $f%d , %s  \n",f1,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
											 
											 
											 }
											 // j(float)!=2.5
											else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==1){
											 
													int t1,f1;
													for(int i=0;i<10;i++){
														if(t[i]==0){
															t1=i;
															break;
														}
												
													}
													for(int z=0;z<32;z++){
														if(f[z]==0){
															f1=z;
															break;
														}
												
													}
													
													float tmp=atof(nd3->SymbolNode->regist); 
													int encoding = *((int *)&tmp);
													fprintf(mips_text,"\nli      $t%d  , %d\n",t1,encoding);
													fprintf(mips_text,"mtc1      $t%d  , $f%d \n",t1,f1);
													
													i_if++;
													fprintf(mips_text, "c.eq.s 	 %s , $f%d \n",nd1->SymbolNode->regist,f1);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
													
											 
											 }
											  // j(float)!=k(float)
											 else if(isFloat(nd1->SymbolNode->regist)==0 && isFloat(nd3->SymbolNode->regist)==0){
													i_if++;
													fprintf(mips_text, "c.eq.s  %s , %s  \n",nd1->SymbolNode->regist,nd3->SymbolNode->regist);	
													fprintf(mips_text, "bc1t   else%d\n\n",i_if);
											 
											 }
											
									break;
								}
					
					break;
						
				}


}
void else_generation(int a){

				fprintf(mips_text, "j end%d\n\nelse%d:\n  ",a,a);
	 
}




void code_generation(AstNode* node){  //executes the syntactic tree for code generation
   
    AstNode* p1;
	AstNode* p2;
	AstNode* p3;
	
	AstNode* p;
	p=(AstNode *)malloc(sizeof(AstNode));
	
	symbol *s1;
	
	if (node == NULL) 
        return; 
   
 
	code_generation(node->pAstNode[0]); 
    code_generation(node->pAstNode[1]); 
	code_generation(node->pAstNode[2]); 
	code_generation(node->pAstNode[3]);
   
	switch (node->NodeType)
        {
			 case astI_D:
			 push_node_code(node);
			
			  if(node->code_generation==0){
				if(node->SymbolNode->typos==10){
					data_generation(node->SymbolNode->name,1);
					declare_generation(node,1);
				}else if(node->SymbolNode->typos==11){
					data_generation(node->SymbolNode->name,2);
					declare_generation(node,2);
				}	
				node->code_generation=1;
			 }
			  
			 break;
			
			 case astI_Dv: 
             push_node_code(node);
			 
			 break;
			 
			 case astINTConst:  
				 push_node_code(node);
				 if(node->code_generation==0){
					 char name[6];
					 itoa(node->SymbolNode->timi,name,10);
					 strcpy(node->SymbolNode->regist,name);
					 node->code_generation=1;
				 } 
			 break;
				
			 case astFLOATConst: 
				 push_node_code(node);
				 if(node->code_generation==0){
					 char name[8];
					 gcvt(node->SymbolNode->timi2,6,name);
					 strcpy(node->SymbolNode->regist,name);
					 node->code_generation=1;
				 } 
				
			 break;
			 
			 
			 case astDeclaration: 	
			 break;
			 
			 case astFactor: 
				 
				p1=pop_node_code();
				
				s1=new_symbol("");
				
				if(p1->SymbolNode->typos==10){
						s1->typos=10;
						p->SymbolNode=s1;
					if(node->code_generation==0){
						
						astFactor_generation(p,p1,1);
					  	node->code_generation=1;
						
					}
						
				}else if(p1->SymbolNode->typos==11){
						s1->typos=11;
						p->SymbolNode=s1;
					if(node->code_generation==0){
					    astFactor_generation(p,p1,2);
					  	node->code_generation=1;
					}
						
				}
				
				p->NodeType=410;
				p->pAstNode[0]=NULL;
				p->pAstNode[1]=NULL;
				p->pAstNode[2]=NULL;
				p->pAstNode[3]=NULL;
				push_node_code(p);
				node=p;

			 break;
			 
			 
			 case astAssign_Expr:  
		
             p3=pop_node_code();
			 p1=pop_node_code();
			 
			 p->NodeType=415;
			 
			 s1=new_symbol("");
			
			
			    if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
			
					s1->typos=10;
					p->SymbolNode=s1;
					if(node->code_generation==0){
					    intialize_generation(p1,p3,1);
					  	node->code_generation=1;
						strcpy(p->SymbolNode->regist,p1->SymbolNode->regist);
					}
					
					
					
					  
				}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
					    s1->typos=10;
						p->SymbolNode=s1;
					  if(node->code_generation==0){
					    intialize_generation(p1,p3,2);
					  	node->code_generation=1;
						 strcpy(p->SymbolNode->regist,p1->SymbolNode->regist);
					 }
					
					
					 
					  
				}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
					    s1->typos=11;
						p->SymbolNode=s1;
					  if(node->code_generation==0){
					    intialize_generation(p1,p3,3);
					  	node->code_generation=1;
						 strcpy(p->SymbolNode->regist,p1->SymbolNode->regist);
					 } 
					
					
					  
					  
					  
				}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){		 
					 s1->typos=11;
					 p->SymbolNode=s1;
					 if(node->code_generation==0){
					    intialize_generation(p1,p3,4);
					  	node->code_generation=1;
						 strcpy(p->SymbolNode->regist,p1->SymbolNode->regist);
					 } 
					
					 
					 
				}
				
				p->pAstNode[0]=NULL;
				p->pAstNode[1]=NULL;
				p->pAstNode[2]=NULL;
				p->pAstNode[3]=NULL;
				push_node_code(p);
				node=p;

				break;
			
				case astC_Op_eq:
					push_node_code(node);
				 break;
				 
				  case astC_Op_lt:
					push_node_code(node);
				 break;
				 
				  case astC_Op_gt:
					push_node_code(node);
				 break;
				 
				  case astC_Op_le:
					push_node_code(node);
				 break;
				 
				  case astC_Op_ge:
					push_node_code(node);
				 break;
				 
				 case astC_Op_neq:
					push_node_code(node);
				 break;
						
				case astRval_Add: 
		 
					p3=pop_node_code();
					p1=pop_node_code();
					 
					p->NodeType=435;
					p->pAstNode[0]=NULL;
					p->pAstNode[1]=NULL;
					p->pAstNode[2]=NULL;
					p->pAstNode[3]=NULL;
					
						
						s1=new_symbol("");
						if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
							
							s1->typos=10;
							p->SymbolNode=s1;
							if(node->code_generation==0){
							
								add_generation(p,p1,p3,1);
								
								node->code_generation=1;
							}
							
									
						}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
						
							
							s1->typos=11;
							p->SymbolNode=s1;
							if(node->code_generation==0){
							
								add_generation(p,p1,p3,2);
								node->code_generation=1;
							}							
							
							
						}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
							
							s1->typos=11;
							p->SymbolNode=s1;
								if(node->code_generation==0){
							
								add_generation(p,p1,p3,3);
								node->code_generation=1;
							}
							
							
						}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
							
							s1->typos=11;
							p->SymbolNode=s1;
							if(node->code_generation==0){
							
								add_generation(p,p1,p3,4);
								node->code_generation=1;
							}
					
						}
						
					push_node_code(p);
					node=p;

				 break;
				 
				 case astRval_Minus: 
		 
					p3=pop_node_code();
					p1=pop_node_code();
					 
					p->NodeType=442;
					p->pAstNode[0]=NULL;
					p->pAstNode[1]=NULL;
					p->pAstNode[2]=NULL;
					p->pAstNode[3]=NULL;
					 
						s1=new_symbol("");
						if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
						
							s1->typos=10;	
							p->SymbolNode=s1;
							if(node->code_generation==0){
							
								subtract_generation(p,p1,p3,1);
								node->code_generation=1;
							}							
							
						
						}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
							
							s1->typos=11;
							p->SymbolNode=s1;
							if(node->code_generation==0){
							
								subtract_generation(p,p1,p3,2);
								node->code_generation=1;
							}
							
							
							
						}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
							
							s1->typos=11;
							p->SymbolNode=s1;
							if(node->code_generation==0){
							
								subtract_generation(p,p1,p3,3);
								node->code_generation=1;
							}
							
							
							
						}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
								
							s1->typos=11;
							p->SymbolNode=s1;
							if(node->code_generation==0){
							
								subtract_generation(p,p1,p3,4);
								node->code_generation=1;
							}
							
						}	
					 
					push_node_code(p);
					node=p;
				 break;
				 
				 case astTerm_mult: 
				 
					p3=pop_node_code();
					p1=pop_node_code();
					 
					p->NodeType=441;
					
					p->pAstNode[0]=NULL;
					p->pAstNode[1]=NULL;
					p->pAstNode[2]=NULL;
					p->pAstNode[3]=NULL;
					 
						s1=new_symbol("");
						if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
						
							s1->typos=10;
							p->SymbolNode=s1; 
							if(node->code_generation==0){
							
								mult_generation(p,p1,p3,1);
								node->code_generation=1;
							}
							
							
						
						}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
							
							s1->typos=11;
							p->SymbolNode=s1; 
							
							if(node->code_generation==0){
								
								mult_generation(p,p1,p3,2);
								node->code_generation=1;
							}
							
							
							
						}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
							
							s1->typos=11;
							p->SymbolNode=s1; 
							if(node->code_generation==0){
							
								mult_generation(p,p1,p3,3);
								node->code_generation=1;
							}
							
							
						}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
							
							s1->typos=11;	
							p->SymbolNode=s1; 
							if(node->code_generation==0){
								mult_generation(p,p1,p3,4);
								node->code_generation=1;
							}
							
							
						}	
						
					push_node_code(p);
					node=p;
				 break;
				 
				 case astTerm_div: 
				 
					p3=pop_node_code();
					p1=pop_node_code();
					 
					p->NodeType=440;
					
					p->pAstNode[0]=NULL;
					p->pAstNode[1]=NULL;
					p->pAstNode[2]=NULL;
					p->pAstNode[3]=NULL;
						
						s1=new_symbol("");
						
					
						if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
							
							s1->typos=10;
							p->SymbolNode=s1; 
							if(node->code_generation==0){
							
								div_generation(p,p1,p3,1);
								node->code_generation=1;
							}
							
						
						}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
						
							
							s1->typos=11;
							p->SymbolNode=s1; 
							if(node->code_generation==0){
							
								div_generation(p,p1,p3,2);
								node->code_generation=1;
							}
							
						}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
							
							s1->typos=11;
							p->SymbolNode=s1; 
							if(node->code_generation==0){
							
								div_generation(p,p1,p3,3);
								node->code_generation=1;
							}
							
							
						}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
							
							s1->typos=11;
							p->SymbolNode=s1; 
							if(node->code_generation==0){
							
								if(node->code_generation==0){
							
								div_generation(p,p1,p3,4);
								node->code_generation=1;
							}
							}
							
						}
					
					push_node_code(p);
					node=p;
					
				 break;
				 
				case astStmt_print:  
		 
		 
					p1=pop_node_code();
							
					if(p1->SymbolNode->typos==10){
							
						if(node->code_generation==0){
							print_generation(p1,1);
							node->code_generation=1;
						}
						
					}else if (p1->SymbolNode->typos==11){
							
						if(node->code_generation==0){
							print_generation(p1,2);
							node->code_generation=1;
						}
							
					}
					 p->NodeType=438;
					 p->SymbolNode=p1->SymbolNode;
					 p->pAstNode[0]=NULL;
					 p->pAstNode[1]=NULL;
					 p->pAstNode[2]=NULL;
					 p->pAstNode[3]=NULL;
					 push_node_code(p);
					 node=p;
				
				 break;
				 
				case astBool_Expr:
		 
				 p3=pop_node_code();
				 p2=pop_node_code();
				 p1=pop_node_code();
				 s1=new_symbol("bool");
				 
				 p->exprL=p1->SymbolNode;
				 p->exprR=p3->SymbolNode;
				 p->oper=p2->oper;
				 
				 switch(p2->oper)
					{
						case 1: //1 ==
				
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,1);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,1);
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
								
									if(node->code_generation==0){
										for_generation(p1,p2,p3,1);
										int a=i_for;
										code_generation(node->previous->pAstNode[3]);
										code_generation(node->previous->pAstNode[2]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
								}
								
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,3);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,3);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
								
									if(node->code_generation==0){
										for_generation(p1,p2,p3,3);
										int a=i_for;
										code_generation(node->previous->pAstNode[3]);
										code_generation(node->previous->pAstNode[2]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
								}
								
								
								
								
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,2);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,2);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
									if(node->code_generation==0){
											for_generation(p1,p2,p3,2);
											int a=i_for;
											code_generation(node->previous->pAstNode[3]);
											code_generation(node->previous->pAstNode[2]);
											
											fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
											
											if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
											node->code_generation=1;
										}
								}
								
								
								
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,4);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,4);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										
										if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
									if(node->code_generation==0){
											for_generation(p1,p2,p3,4);
											int a=i_for;
											code_generation(node->previous->pAstNode[3]);
											code_generation(node->previous->pAstNode[2]);
											
											fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
											
											if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
											node->code_generation=1;
										}
								}
								
								
								
							}
							
						break;
						
						case 2: //2 < 
							
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,1);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,1);
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
								
									if(node->code_generation==0){
										for_generation(p1,p2,p3,1);
										int a=i_for;
										code_generation(node->previous->pAstNode[3]);
										code_generation(node->previous->pAstNode[2]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
								}
								
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,3);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,3);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
								
									if(node->code_generation==0){
										for_generation(p1,p2,p3,3);
										int a=i_for;
										code_generation(node->previous->pAstNode[3]);
										code_generation(node->previous->pAstNode[2]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
								}
								
								
								
								
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,2);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,2);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
									if(node->code_generation==0){
											for_generation(p1,p2,p3,2);
											int a=i_for;
											code_generation(node->previous->pAstNode[3]);
											code_generation(node->previous->pAstNode[2]);
											
											fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
											
											if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
											node->code_generation=1;
										}
								}
								
								
								
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,4);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,4);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										
										if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
									if(node->code_generation==0){
											for_generation(p1,p2,p3,4);
											int a=i_for;
											code_generation(node->previous->pAstNode[3]);
											code_generation(node->previous->pAstNode[2]);
											
											fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
											
											if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
											node->code_generation=1;
										}
								}
								
								
								
							}
							
						break;
						
						case 3: //3 > 
						
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,1);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,1);
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
								
									if(node->code_generation==0){
										for_generation(p1,p2,p3,1);
										int a=i_for;
										code_generation(node->previous->pAstNode[3]);
										code_generation(node->previous->pAstNode[2]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
								}
								
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,3);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,3);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
								
									if(node->code_generation==0){
										for_generation(p1,p2,p3,3);
										int a=i_for;
										code_generation(node->previous->pAstNode[3]);
										code_generation(node->previous->pAstNode[2]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
								}
								
								
								
								
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,2);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,2);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
									if(node->code_generation==0){
											for_generation(p1,p2,p3,2);
											int a=i_for;
											code_generation(node->previous->pAstNode[3]);
											code_generation(node->previous->pAstNode[2]);
											
											fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
											
											if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
											node->code_generation=1;
										}
								}
								
								
								
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,4);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,4);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										
										if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
									if(node->code_generation==0){
											for_generation(p1,p2,p3,4);
											int a=i_for;
											code_generation(node->previous->pAstNode[3]);
											code_generation(node->previous->pAstNode[2]);
											
											fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
											
											if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
											node->code_generation=1;
										}
								}
								
								
								
							}
							
							
						break;
						
						case 4: //4 <= 
							
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,1);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,1);
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
								
									if(node->code_generation==0){
										for_generation(p1,p2,p3,1);
										int a=i_for;
										code_generation(node->previous->pAstNode[3]);
										code_generation(node->previous->pAstNode[2]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
								}
								
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,3);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,3);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
								
									if(node->code_generation==0){
										for_generation(p1,p2,p3,3);
										int a=i_for;
										code_generation(node->previous->pAstNode[3]);
										code_generation(node->previous->pAstNode[2]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
								}
								
								
								
								
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,2);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,2);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
									if(node->code_generation==0){
											for_generation(p1,p2,p3,2);
											int a=i_for;
											code_generation(node->previous->pAstNode[3]);
											code_generation(node->previous->pAstNode[2]);
											
											fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
											
											if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
											node->code_generation=1;
										}
								}
								
								
								
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,4);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,4);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										
										if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
									if(node->code_generation==0){
											for_generation(p1,p2,p3,4);
											int a=i_for;
											code_generation(node->previous->pAstNode[3]);
											code_generation(node->previous->pAstNode[2]);
											
											fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
											
											if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
											node->code_generation=1;
										}
								}
								
								
								
							}
							
						break;
						
						case 5: //5  >= 
							
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,1);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,1);
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
								
									if(node->code_generation==0){
										for_generation(p1,p2,p3,1);
										int a=i_for;
										code_generation(node->previous->pAstNode[3]);
										code_generation(node->previous->pAstNode[2]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
								}
								
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,3);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,3);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
								
									if(node->code_generation==0){
										for_generation(p1,p2,p3,3);
										int a=i_for;
										code_generation(node->previous->pAstNode[3]);
										code_generation(node->previous->pAstNode[2]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
								}
								
								
								
								
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,2);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,2);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
									if(node->code_generation==0){
											for_generation(p1,p2,p3,2);
											int a=i_for;
											code_generation(node->previous->pAstNode[3]);
											code_generation(node->previous->pAstNode[2]);
											
											fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
											
											if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
											node->code_generation=1;
										}
								}
								
								
								
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,4);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,4);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										
										if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
									if(node->code_generation==0){
											for_generation(p1,p2,p3,4);
											int a=i_for;
											code_generation(node->previous->pAstNode[3]);
											code_generation(node->previous->pAstNode[2]);
											
											fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
											
											if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
											node->code_generation=1;
										}
								}
								
								
								
							}
							
							
						break;
						
						case 6: //6 !=
						
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,1);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,1);
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
								
									if(node->code_generation==0){
										for_generation(p1,p2,p3,1);
										int a=i_for;
										code_generation(node->previous->pAstNode[3]);
										code_generation(node->previous->pAstNode[2]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
								}
								
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,3);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,3);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
								
									if(node->code_generation==0){
										for_generation(p1,p2,p3,3);
										int a=i_for;
										code_generation(node->previous->pAstNode[3]);
										code_generation(node->previous->pAstNode[2]);
										
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										node->code_generation=1;
									}
								}
								
								
								
								
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,2);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,2);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										
										if(p1->SymbolNode->release_register=='t'){
											t[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register=='f'){
											f[p1->SymbolNode->release_nr_register]=0;
										}
										if(p1->SymbolNode->release_register2=='t'){
											t[p1->SymbolNode->release_nr_register2]=0;
										}
										if(p1->SymbolNode->release_register2=='f'){
											f[p1->SymbolNode->release_nr_register2]=0;
										}
										
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
									if(node->code_generation==0){
											for_generation(p1,p2,p3,2);
											int a=i_for;
											code_generation(node->previous->pAstNode[3]);
											code_generation(node->previous->pAstNode[2]);
											
											fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
											
											if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
											node->code_generation=1;
										}
								}
								
								
								
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
								if( node->previous->NodeType==425){  // if statement code generation
									if(node->code_generation==0){
										if_generation(p1,p2,p3,4);
										int a=i_if;
										code_generation(node->previous->pAstNode[1]);
										else_generation(a);
										code_generation(node->previous->pAstNode[2]);
										fprintf(mips_text,"end%d:\n\n",a);
										node->code_generation=1;
									}
								
								}
								if( node->previous->NodeType==424){  // while statement code generation
	
									if(node->code_generation==0){
										while_generation(p1,p2,p3,4);
										t[p1->SymbolNode->release_register]=0;
										int a=i_while;
										code_generation(node->previous->pAstNode[1]);
										fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
										
										if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
										node->code_generation=1;
									}
									
								}
								if( node->previous->NodeType==419){
									if(node->code_generation==0){
											for_generation(p1,p2,p3,4);
											int a=i_for;
											code_generation(node->previous->pAstNode[3]);
											code_generation(node->previous->pAstNode[2]);
											
											fprintf(mips_text,"j L%d\nexit%d:\n\n",a,a);
											
											if(p1->SymbolNode->release_register=='t'){
												t[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register=='f'){
												f[p1->SymbolNode->release_nr_register]=0;
											}
											if(p1->SymbolNode->release_register2=='t'){
												t[p1->SymbolNode->release_nr_register2]=0;
											}
											if(p1->SymbolNode->release_register2=='f'){
												f[p1->SymbolNode->release_nr_register2]=0;
											}
											
											node->code_generation=1;
										}
								}
								
							}
						break;
					}
					break;
		
	}
	
}

void exe_Postorder(AstNode* node) // syntactic tree for semantic analysis
{ 
	
	AstNode* p1;
	AstNode* p2;
	AstNode* p3;
	
	AstNode* p;
	p=(AstNode *)malloc(sizeof(AstNode));
	
	symbol *s1,*s2,*s3;
	
	if (node == NULL) 
        return; 
   
 
	exe_Postorder(node->pAstNode[0]); 
    exe_Postorder(node->pAstNode[1]); 
	exe_Postorder(node->pAstNode[2]); 
	exe_Postorder(node->pAstNode[3]);
   
	if (node->SymbolNode!=NULL && node->available==1){
	   			
		
		switch (node->NodeType)
        {
		
		 case astI_D:
			push_node(node);
		 break;
		
		 case astI_Dv: 
             push_node(node);
			 
		 break;
		 
		 case astINTConst:  
             push_node(node);
			 
         break;
			
			
		 case astFLOATConst: 
			 push_node(node);
			
		 break;
		 
		 case astDeclaration: 
			 disable(node->pAstNode[1]);
			
		 break;
		 
		 case astFactor: 
			p1=pop_node();
			
			s1=new_symbol("");
			
			if(p1->SymbolNode->typos==10){
					s1->typos=10;
					s1->timi=p1->SymbolNode->timi*-1;
			}else if(p1->SymbolNode->typos==11){
					s1->typos=11;
					s1->timi2=p1->SymbolNode->timi2*-1.0;
				}
			p->NodeType=410;
			p->SymbolNode=s1;
			p->pAstNode[0]=NULL;
			p->pAstNode[1]=NULL;
            p->pAstNode[2]=NULL;
            p->pAstNode[3]=NULL;
			push_node(p);
			node=p;
			
		 break;
	
		 
		 case astAssign_Expr:  
		 

             p3=pop_node();
			 p1=pop_node();
			 
			 s1=new_symbol("");
			
			 
			 if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
					 
					  findsymb(p1->SymbolNode->name)->timi=p3->SymbolNode->timi;
					  memcpy(s1,p1->SymbolNode,sizeof(symbol));
					
					  
				}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
					  findsymb(p1->SymbolNode->name)->timi=(int)p3->SymbolNode->timi2;
					  memcpy(s1,p1->SymbolNode,sizeof(symbol));
					  
				}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
					  findsymb(p1->SymbolNode->name)->timi2=(float)p3->SymbolNode->timi;
					  memcpy(s1,p1->SymbolNode,sizeof(symbol));
					  
					  
				}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
					  findsymb(p1->SymbolNode->name)->timi2=p3->SymbolNode->timi2;
					  
					  memcpy(s1,p1->SymbolNode,sizeof(symbol));	  
				}
			 
			 
			 p->NodeType=415;
			 p->SymbolNode=s1;
			 p->pAstNode[0]=NULL;
			 p->pAstNode[1]=NULL;
             p->pAstNode[2]=NULL;
             p->pAstNode[3]=NULL;
			 p->SymbolNode->timi=p1->SymbolNode->timi;
			 push_node(p);
			 node=p;
			 
			 
         break;
			
		 
		 case astC_Op_eq:
			push_node(node);
		 break;
		 
		  case astC_Op_lt:
			push_node(node);
		 break;
		 
		  case astC_Op_gt:
			push_node(node);
		 break;
		 
		  case astC_Op_le:
			push_node(node);
		 break;
		 
		  case astC_Op_ge:
			push_node(node);
		 break;
		 
		 case astC_Op_neq:
			push_node(node);
		 break;
		 	
		 case astRval_Add: 
		 
            p3=pop_node();
			p1=pop_node();
			 
			p->NodeType=435;
			p->pAstNode[0]=NULL;
			p->pAstNode[1]=NULL;
            p->pAstNode[2]=NULL;
            p->pAstNode[3]=NULL;
			
			 
				s1=new_symbol("");
				if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
				
					memcpy(s1,p1->SymbolNode,sizeof(symbol));
					s1->typos=10;
					s1->timi=p1->SymbolNode->timi + p3->SymbolNode->timi;	
					p->SymbolNode=s1;
					
				
				}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
				
					memcpy(s1,p1->SymbolNode,sizeof(symbol));
					s1->typos=11;
					s1->timi2=(float)p1->SymbolNode->timi + p3->SymbolNode->timi2;
					p->SymbolNode=s1;					
					
					
				}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
					memcpy(s1,p1->SymbolNode,sizeof(symbol));
					s1->typos=11;
					s1->timi2=p1->SymbolNode->timi2 + (float)p3->SymbolNode->timi;
					p->SymbolNode=s1;
					
					
				}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
				    memcpy(s1,p1->SymbolNode,sizeof(symbol));
					s1->typos=11;
					s1->timi2=p1->SymbolNode->timi2 + p3->SymbolNode->timi2;	
					p->SymbolNode=s1;
					
					
				}
			
			push_node(p);
			node=p;

         break;
		 
		 case astRval_Minus: 
		 
            p3=pop_node();
			p1=pop_node();
			 
			p->NodeType=442;
			p->pAstNode[0]=NULL;
			p->pAstNode[1]=NULL;
            p->pAstNode[2]=NULL;
            p->pAstNode[3]=NULL;
			 
				s1=new_symbol("");
				if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
					memcpy(s1,p1->SymbolNode,sizeof(symbol));
					s1->typos=10;
					s1->timi=p1->SymbolNode->timi-p3->SymbolNode->timi;					
					
				
				}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
					memcpy(s1,p1->SymbolNode,sizeof(symbol));
					s1->typos=11;
					s1->timi2=(float)p1->SymbolNode->timi - p3->SymbolNode->timi2;
					
					
				}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
					memcpy(s1,p1->SymbolNode,sizeof(symbol));
					s1->typos=11;
					s1->timi2=p1->SymbolNode->timi2 - (float)p3->SymbolNode->timi;
					
					
				}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
					memcpy(s1,p1->SymbolNode,sizeof(symbol));	
					s1->typos=11;
					s1->timi2=p1->SymbolNode->timi2 - p3->SymbolNode->timi2;
				}	
			 
			p->SymbolNode=s1;
			push_node(p);
			node=p;
         break;
		 
		 case astTerm_mult: 
		 
            p3=pop_node();
			p1=pop_node();
			 
			p->NodeType=441;
			
			p->pAstNode[0]=NULL;
			p->pAstNode[1]=NULL;
            p->pAstNode[2]=NULL;
            p->pAstNode[3]=NULL;
			 
				s1=new_symbol("");
				if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
					memcpy(s1,p1->SymbolNode,sizeof(symbol));
					s1->typos=10;
					s1->timi=p1->SymbolNode->timi * p3->SymbolNode->timi;
					
				
				}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
					memcpy(s1,p1->SymbolNode,sizeof(symbol));
					s1->typos=11;
					s1->timi2=(float)p1->SymbolNode->timi * p3->SymbolNode->timi2;
					
					
				}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
					memcpy(s1,p1->SymbolNode,sizeof(symbol));
					s1->typos=11;
					s1->timi2=p1->SymbolNode->timi2 * (float)p3->SymbolNode->timi;
					
					
				}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
					memcpy(s1,p1->SymbolNode,sizeof(symbol));
					s1->typos=11;
					s1->timi2=p1->SymbolNode->timi2 * p3->SymbolNode->timi2;	
					
					
				}	
				
			p->SymbolNode=s1; 
			push_node(p);
			node=p;
         break;
		 
		 case astTerm_div: 
		 
            p3=pop_node();
			p1=pop_node();
			 
			p->NodeType=440;
			
			p->pAstNode[0]=NULL;
			p->pAstNode[1]=NULL;
            p->pAstNode[2]=NULL;
            p->pAstNode[3]=NULL;
				
				
				s1=new_symbol("");
	
				
				if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
					memcpy(s1,p1->SymbolNode,sizeof(symbol));	
					s1->typos=10;
					
					s1->timi=p1->SymbolNode->timi / p3->SymbolNode->timi;	
				
				}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
				
					memcpy(s1,p1->SymbolNode,sizeof(symbol));
					s1->typos=11;
					s1->timi2=(float)p1->SymbolNode->timi / p3->SymbolNode->timi2;
					
					
				}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
					memcpy(s1,p1->SymbolNode,sizeof(symbol));
					s1->typos=11;
					
					s1->timi2=p1->SymbolNode->timi2/(float)p3->SymbolNode->timi;
					
					
				}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
					memcpy(s1,p1->SymbolNode,sizeof(symbol));
					s1->typos=11;
					s1->timi2=p1->SymbolNode->timi2/p3->SymbolNode->timi2;
					
				}
			
				
			p->SymbolNode=s1; 
			push_node(p);
			node=p;
			
         break;
		 
		  case astStmt_print:  
		 
		  
			p1=pop_node();
					
			if(p1->SymbolNode->typos==10){
					
				printf("%d\n",p1->SymbolNode->timi);
			
			}else if (p1->SymbolNode->typos==11){
					
				printf("%f\n",p1->SymbolNode->timi2);
					
			}
			 p->NodeType=438;
			 p->SymbolNode=p1->SymbolNode;
			 p->pAstNode[0]=NULL;
			 p->pAstNode[1]=NULL;
             p->pAstNode[2]=NULL;
             p->pAstNode[3]=NULL;
			 p->SymbolNode->timi=p1->SymbolNode->timi;
			 push_node(p);
			 node=p;
		
         break;
		 
		 case astBool_Expr:
		 

		 p3=pop_node();
		 p2=pop_node();
		 p1=pop_node();
		 s1=new_symbol("bool");
		 
		 p->exprL=p1->SymbolNode;
		 p->exprR=p3->SymbolNode;
		 p->oper=p2->oper;
		 
		 switch(p2->oper)
			{
				case 1: //1 ==
		
					if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
						if(p1->SymbolNode->timi == p3->SymbolNode->timi){
						
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
					}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
						if(p1->SymbolNode->timi2 == (float)p3->SymbolNode->timi){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
					}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
						
						if((float)p1->SymbolNode->timi == p3->SymbolNode->timi2){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
					}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
						if(p1->SymbolNode->timi2 == p3->SymbolNode->timi2){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
					}
					
				break;
				
				case 2: //2 < 
					
					if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
					
					   
						if(p1->SymbolNode->timi < p3->SymbolNode->timi){
						    
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
						
					}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
						if(p1->SymbolNode->timi2 < (float)p3->SymbolNode->timi){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
						
					}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
						if((float)p1->SymbolNode->timi < p3->SymbolNode->timi2){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
					}else {
						if(p1->SymbolNode->timi2 < p3->SymbolNode->timi2){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
						
					}
					
					
				break;
				
				case 3: //3 > 
				
					if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
						if(p1->SymbolNode->timi > p3->SymbolNode->timi){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
						
					}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
						if(p1->SymbolNode->timi2 > (float)p3->SymbolNode->timi){
							p->bool_expr=1;
							break;
						}
						else{
						
							p->bool_expr=0;
							break;
						}
						
					}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
						if((float)p1->SymbolNode->timi > p3->SymbolNode->timi2){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
					}else {
						if(p1->SymbolNode->timi2 > p3->SymbolNode->timi2){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
						
					}
					
					
				break;
				
				case 4: //4 <= 
					
					if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
						if(p1->SymbolNode->timi <= p3->SymbolNode->timi){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
						
					}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
						if(p1->SymbolNode->timi2 <= (float)p3->SymbolNode->timi){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
						
					}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
						if((float)p1->SymbolNode->timi <= p3->SymbolNode->timi2){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
					}else {
						if(p1->SymbolNode->timi2 <= p3->SymbolNode->timi2){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
						
					}
					
				break;
				
				case 5: //5 >=
					
					if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
						if(p1->SymbolNode->timi >= p3->SymbolNode->timi){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
						
					}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
						if(p1->SymbolNode->timi2 >= (float)p3->SymbolNode->timi){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
						
					}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
						if((float)p1->SymbolNode->timi >= p3->SymbolNode->timi2){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
					}else {
						if(p1->SymbolNode->timi2 >= p3->SymbolNode->timi2){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
						
					}
					
					
				break;
				
				case 6: //6 !=
				
					if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
						if(p1->SymbolNode->timi != p3->SymbolNode->timi){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
						
					}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
						if(p1->SymbolNode->timi2 != (float)p3->SymbolNode->timi){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
						
					}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
						if((float)p1->SymbolNode->timi != p3->SymbolNode->timi2){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
					}else {
						if(p1->SymbolNode->timi2 != p3->SymbolNode->timi2){
							p->bool_expr=1;
							break;
						}
						else{
							p->bool_expr=0;
							break;
						}
						
					}
					
				break;
			}
			
			if(p->bool_expr==1){
				
		
				if( node->previous->NodeType==425){  //  if  statement  implementation 
				
					disable(node->previous->pAstNode[2]);
	
				}
				else if( node->previous->NodeType==424){  // while  implementation 
 
					switch(p2->oper)
					{
						case 1: //1 ==
						
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
									
									while(p1->SymbolNode->timi == p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
							
							
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								
									while(p1->SymbolNode->timi2 == p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
							
						
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
							
									while(p1->SymbolNode->timi == p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
									
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
						
									while(p1->SymbolNode->timi2 == p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
							}
						
						break;
						
						case 2: //2 < 
							
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
									
									
									while(p1->SymbolNode->timi < p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									
									break;
							
							
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								
									while(p1->SymbolNode->timi2 < p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
							
						
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
							
									while(p1->SymbolNode->timi < p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
									
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
						
									while(p1->SymbolNode->timi2 < p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
							}
							
						break;
						
						case 3: //3 >
						
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
									
									while(p1->SymbolNode->timi > p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
							
							
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								
									while(p1->SymbolNode->timi2 > p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
							
						
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
							
									while(p1->SymbolNode->timi > p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
									
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
						
									while(p1->SymbolNode->timi2 > p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
							}
							
							
						break;
						
						
						case 4: //4  <= 
						
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
									
									while(p1->SymbolNode->timi <= p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
							
							
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								
									while(p1->SymbolNode->timi2 <= p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
							
						
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
							
									while(p1->SymbolNode->timi <= p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
									
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
						
									while(p1->SymbolNode->timi2 <= p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
							}
							
						break;
						
						case 5: //5 >= 
						
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
									
									while(p1->SymbolNode->timi >= p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
							
							
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								
									while(p1->SymbolNode->timi2 >= p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
							
						
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
							
									while(p1->SymbolNode->timi >= p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
									
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
						
									while(p1->SymbolNode->timi2 >= p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
							}
							
						break;
						
						case 6: //6 !=
						
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
									
									while(p1->SymbolNode->timi != p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
							
							
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								
									while(p1->SymbolNode->timi2 != p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
							
						
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
							
									while(p1->SymbolNode->timi != p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
									
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
						
									while(p1->SymbolNode->timi2 != p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[1]);
									}
									break;
							}
							
						break;
					}
					disable(node->previous->pAstNode[1]);
					
				}
				else if (node->previous->NodeType==419) {   //for implementation
					
					
					switch(p2->oper)
					{
					
						case 1: //1 ==
						
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
									
									while(p1->SymbolNode->timi == p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							
							
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								
									while(p1->SymbolNode->timi2 == p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							
						
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
							
									while(p1->SymbolNode->timi == p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
									
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
						
									while(p1->SymbolNode->timi2 == p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							}
						
						break;
						
						case 2: //2 < 
							
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
									
									
									while(p1->SymbolNode->timi < p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							
							
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								
									while(p1->SymbolNode->timi2 < p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							
						
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
							
									while(p1->SymbolNode->timi < p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
									
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
						
									while(p1->SymbolNode->timi2 < p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							}
							
						break;
						
						case 3: //3 >
						
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
									
									while(p1->SymbolNode->timi > p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							
							
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								
									while(p1->SymbolNode->timi2 > p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							
						
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
							
									while(p1->SymbolNode->timi > p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
									
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
						
									while(p1->SymbolNode->timi2 > p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							}
							
							
						break;
						
						
						case 4: //4  <= 
						
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
									
									while(p1->SymbolNode->timi <= p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							
							
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								
									while(p1->SymbolNode->timi2 <= p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							
						
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
							
									while(p1->SymbolNode->timi <= p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
									
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
						
									while(p1->SymbolNode->timi2 <= p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							}
							
						break;
						
						case 5: //5 >= 
						
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
									
									while(p1->SymbolNode->timi >= p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							
							
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								
									while(p1->SymbolNode->timi2 >= p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							
						
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
							
									while(p1->SymbolNode->timi >= p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
									
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
						
									while(p1->SymbolNode->timi2 >= p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							}
							
						break;
						
						case 6: //6 !=
						
							if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==10){
									
									while(p1->SymbolNode->timi != p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							
							
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==10){
								
									while(p1->SymbolNode->timi2 != p3->SymbolNode->timi){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							
						
							}else if(p1->SymbolNode->typos==10 && p3->SymbolNode->typos==11){
							
									while(p1->SymbolNode->timi != p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
									
							}else if(p1->SymbolNode->typos==11 && p3->SymbolNode->typos==11){
						
									while(p1->SymbolNode->timi2 != p3->SymbolNode->timi2){
										exe_Postorder(node->previous->pAstNode[3]);
										exe_Postorder(node->previous->pAstNode[2]);
									}
									break;
							}
							
						break;
					}
					disable(node->previous->pAstNode[3]);
					disable(node->previous->pAstNode[2]);
				}
				
				
			}else{
			
				if( node->previous->NodeType==425){
					
					disable(node->previous->pAstNode[1]);
	
				}
				else if( node->previous->NodeType==424){
				
					disable(node->previous->pAstNode[1]);
	
				}
				else if ( node->previous->NodeType==419){
				
					disable(node->previous->pAstNode[3]);
	
				}
			}
			 p->NodeType=427;
			 p->SymbolNode=s1;
			 p->pAstNode[0]=NULL;
			 p->pAstNode[1]=NULL;
             p->pAstNode[2]=NULL;
             p->pAstNode[3]=NULL;
			 push_node(p);
			 node=p;
			 
		 break;
				
		}
	}	
}

